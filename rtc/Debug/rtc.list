
rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005aa4  08005aa4  00006aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b3c  08005b3c  0000719c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b3c  08005b3c  00006b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b44  08005b44  0000719c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b48  08005b48  00006b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08005ba8  0000705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08005c48  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000086c  2000019c  08005ce8  0000719c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a08  08005ce8  00007a08  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000719c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000181f8  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036e2  00000000  00000000  0001f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012e0  00000000  00000000  00022aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e84  00000000  00000000  00023d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029565  00000000  00000000  00024c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001aaf2  00000000  00000000  0004e171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f889d  00000000  00000000  00068c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00161500  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005358  00000000  00000000  00161544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  0016689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a8c 	.word	0x08005a8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	08005a8c 	.word	0x08005a8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f98f 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f806 	bl	80005cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f004 fbb2 	bl	8004d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f99b 	bl	8000926 <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f971 	bl	80008ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000008 	.word	0x20000008
 8000624:	20000004 	.word	0x20000004
 8000628:	20000000 	.word	0x20000000

0800062c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_IncTick+0x20>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_IncTick+0x24>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <HAL_IncTick+0x24>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000004 	.word	0x20000004
 8000650:	200001b8 	.word	0x200001b8

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <HAL_GetTick+0x14>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	200001b8 	.word	0x200001b8

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff ffee 	bl	8000654 <HAL_GetTick>
 8000678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <HAL_Delay+0x44>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	bf00      	nop
 8000694:	f7ff ffde 	bl	8000654 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <HAL_SuspendTick+0x1c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <HAL_SuspendTick+0x1c>)
 80006be:	f023 0302 	bic.w	r3, r3, #2
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e010 	.word	0xe000e010

080006d4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <HAL_ResumeTick+0x1c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <HAL_ResumeTick+0x1c>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010

080006f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <__NVIC_SetPriorityGrouping+0x40>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	4313      	orrs	r3, r2
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <__NVIC_SetPriorityGrouping+0x40>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	05fa0000 	.word	0x05fa0000

0800073c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <__NVIC_GetPriorityGrouping+0x18>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	f003 0307 	and.w	r3, r3, #7
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	db0e      	blt.n	8000788 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800076a:	4a0b      	ldr	r2, [pc, #44]	@ (8000798 <__NVIC_GetPendingIRQ+0x40>)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	095b      	lsrs	r3, r3, #5
 8000772:	3340      	adds	r3, #64	@ 0x40
 8000774:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 031f 	and.w	r3, r3, #31
 800077e:	fa22 f303 	lsr.w	r3, r2, r3
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	e000      	b.n	800078a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8000788:	2300      	movs	r3, #0
  }
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db0c      	blt.n	80007c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4907      	ldr	r1, [pc, #28]	@ (80007d4 <__NVIC_ClearPendingIRQ+0x38>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	3360      	adds	r3, #96	@ 0x60
 80007c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	@ (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	@ (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	@ 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	@ 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008a4:	d301      	bcc.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00f      	b.n	80008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <SysTick_Config+0x40>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	210f      	movs	r1, #15
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f7ff ff8e 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <SysTick_Config+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <SysTick_Config+0x40>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff07 	bl	80006f4 <__NVIC_SetPriorityGrouping>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000900:	f7ff ff1c 	bl	800073c <__NVIC_GetPriorityGrouping>
 8000904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff8e 	bl	800082c <NVIC_EncodePriority>
 8000910:	4602      	mov	r2, r0
 8000912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffb0 	bl	8000894 <SysTick_Config>
 8000934:	4603      	mov	r3, r0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff03 	bl	8000758 <__NVIC_GetPendingIRQ>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff16 	bl	800079c <__NVIC_ClearPendingIRQ>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e086      	b.n	8000a98 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000990:	2b00      	cmp	r3, #0
 8000992:	d106      	bne.n	80009a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2223      	movs	r2, #35	@ 0x23
 8000998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f003 fdd1 	bl	8004544 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa0 <HAL_ETH_Init+0x128>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa0 <HAL_ETH_Init+0x128>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa0 <HAL_ETH_Init+0x128>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80009ba:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa4 <HAL_ETH_Init+0x12c>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4a39      	ldr	r2, [pc, #228]	@ (8000aa4 <HAL_ETH_Init+0x12c>)
 80009c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80009c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80009c6:	4b37      	ldr	r3, [pc, #220]	@ (8000aa4 <HAL_ETH_Init+0x12c>)
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4935      	ldr	r1, [pc, #212]	@ (8000aa4 <HAL_ETH_Init+0x12c>)
 80009d0:	4313      	orrs	r3, r2
 80009d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80009d4:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <HAL_ETH_Init+0x12c>)
 80009d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80009ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009f0:	f7ff fe30 	bl	8000654 <HAL_GetTick>
 80009f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80009f6:	e011      	b.n	8000a1c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80009f8:	f7ff fe2c 	bl	8000654 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a06:	d909      	bls.n	8000a1c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	22e0      	movs	r2, #224	@ 0xe0
 8000a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e03d      	b.n	8000a98 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1e4      	bne.n	80009f8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f97a 	bl	8000d28 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fa25 	bl	8000e84 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 fa7b 	bl	8000f36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	461a      	mov	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f9e3 	bl	8000e14 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8000a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_ETH_Init+0x130>)
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8000a82:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2210      	movs	r2, #16
 8000a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40013800 	.word	0x40013800
 8000aa8:	00020060 	.word	0x00020060

08000aac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4b53      	ldr	r3, [pc, #332]	@ (8000c10 <ETH_SetMACConfig+0x164>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	7b9b      	ldrb	r3, [r3, #14]
 8000aca:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	7c12      	ldrb	r2, [r2, #16]
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d102      	bne.n	8000ada <ETH_SetMACConfig+0x2e>
 8000ad4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ad8:	e000      	b.n	8000adc <ETH_SetMACConfig+0x30>
 8000ada:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8000adc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	7c52      	ldrb	r2, [r2, #17]
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d102      	bne.n	8000aec <ETH_SetMACConfig+0x40>
 8000ae6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000aea:	e000      	b.n	8000aee <ETH_SetMACConfig+0x42>
 8000aec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8000aee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8000af4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	7fdb      	ldrb	r3, [r3, #31]
 8000afa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8000afc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8000b02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	7f92      	ldrb	r2, [r2, #30]
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	d102      	bne.n	8000b12 <ETH_SetMACConfig+0x66>
 8000b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b10:	e000      	b.n	8000b14 <ETH_SetMACConfig+0x68>
 8000b12:	2200      	movs	r2, #0
                        macconf->Speed |
 8000b14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	7f1b      	ldrb	r3, [r3, #28]
 8000b1a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8000b1c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8000b22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8000b2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d102      	bne.n	8000b3c <ETH_SetMACConfig+0x90>
 8000b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b3a:	e000      	b.n	8000b3e <ETH_SetMACConfig+0x92>
 8000b3c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8000b3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	7bdb      	ldrb	r3, [r3, #15]
 8000b44:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000b46:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8000b4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000b54:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8000b56:	4313      	orrs	r3, r2
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff fd7c 	bl	800066c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b92:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d101      	bne.n	8000ba2 <ETH_SetMACConfig+0xf6>
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	e000      	b.n	8000ba4 <ETH_SetMACConfig+0xf8>
 8000ba2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000ba4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8000baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8000bb2:	2a01      	cmp	r2, #1
 8000bb4:	d101      	bne.n	8000bba <ETH_SetMACConfig+0x10e>
 8000bb6:	2208      	movs	r2, #8
 8000bb8:	e000      	b.n	8000bbc <ETH_SetMACConfig+0x110>
 8000bba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8000bbc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8000bc4:	2a01      	cmp	r2, #1
 8000bc6:	d101      	bne.n	8000bcc <ETH_SetMACConfig+0x120>
 8000bc8:	2204      	movs	r2, #4
 8000bca:	e000      	b.n	8000bce <ETH_SetMACConfig+0x122>
 8000bcc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8000bce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8000bd6:	2a01      	cmp	r2, #1
 8000bd8:	d101      	bne.n	8000bde <ETH_SetMACConfig+0x132>
 8000bda:	2202      	movs	r2, #2
 8000bdc:	e000      	b.n	8000be0 <ETH_SetMACConfig+0x134>
 8000bde:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000be0:	4313      	orrs	r3, r2
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fd37 	bl	800066c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	619a      	str	r2, [r3, #24]
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	fd20810f 	.word	0xfd20810f

08000c14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d24 <ETH_SetDMAConfig+0x110>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	7b1b      	ldrb	r3, [r3, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <ETH_SetDMAConfig+0x2c>
 8000c3a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c3e:	e000      	b.n	8000c42 <ETH_SetDMAConfig+0x2e>
 8000c40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	7b5b      	ldrb	r3, [r3, #13]
 8000c46:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000c48:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	7f52      	ldrb	r2, [r2, #29]
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	d102      	bne.n	8000c58 <ETH_SetDMAConfig+0x44>
 8000c52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000c56:	e000      	b.n	8000c5a <ETH_SetDMAConfig+0x46>
 8000c58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000c5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	7b9b      	ldrb	r3, [r3, #14]
 8000c60:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000c62:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000c68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	7f1b      	ldrb	r3, [r3, #28]
 8000c6e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8000c70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	7f9b      	ldrb	r3, [r3, #30]
 8000c76:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000c78:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000c7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c86:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fcde 	bl	800066c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000cc8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8000cce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000cd4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cdc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8000cde:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000ce6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000cec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000cfa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff fcaf 	bl	800066c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	f8de3f23 	.word	0xf8de3f23

08000d28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0a6      	sub	sp, #152	@ 0x98
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000d90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d94:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000d96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000da2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fe7f 	bl	8000aac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8000db2:	2301      	movs	r3, #1
 8000db4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000dde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000de4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000de8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000dea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dee:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff05 	bl	8000c14 <ETH_SetDMAConfig>
}
 8000e0a:	bf00      	nop
 8000e0c:	3798      	adds	r7, #152	@ 0x98
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3305      	adds	r3, #5
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	3204      	adds	r2, #4
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <ETH_MACAddressConfig+0x68>)
 8000e36:	4413      	add	r3, r2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3303      	adds	r3, #3
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	061a      	lsls	r2, r3, #24
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3302      	adds	r3, #2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	041b      	lsls	r3, r3, #16
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <ETH_MACAddressConfig+0x6c>)
 8000e66:	4413      	add	r3, r2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40028040 	.word	0x40028040
 8000e80:	40028044 	.word	0x40028044

08000e84 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e03e      	b.n	8000f10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68d9      	ldr	r1, [r3, #12]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	440b      	add	r3, r1
 8000ea2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	3206      	adds	r2, #6
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d80c      	bhi.n	8000ef4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68d9      	ldr	r1, [r3, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	461a      	mov	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	e004      	b.n	8000efe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d9bd      	bls.n	8000e92 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f28:	611a      	str	r2, [r3, #16]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e048      	b.n	8000fd6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6919      	ldr	r1, [r3, #16]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	3212      	adds	r2, #18
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d80c      	bhi.n	8000fc6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6919      	ldr	r1, [r3, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	e004      	b.n	8000fd0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d9b3      	bls.n	8000f44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001006:	60da      	str	r2, [r3, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	2201      	movs	r2, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800102e:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_EXTI_ClearPending+0x2c>)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6153      	str	r3, [r2, #20]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40013c00 	.word	0x40013c00

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e175      	b.n	8001350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8164 	bne.w	800134a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x56>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80be 	beq.w	800134a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b66      	ldr	r3, [pc, #408]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a65      	ldr	r2, [pc, #404]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b63      	ldr	r3, [pc, #396]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011e6:	4a61      	ldr	r2, [pc, #388]	@ (800136c <HAL_GPIO_Init+0x328>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a58      	ldr	r2, [pc, #352]	@ (8001370 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d037      	beq.n	8001282 <HAL_GPIO_Init+0x23e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a57      	ldr	r2, [pc, #348]	@ (8001374 <HAL_GPIO_Init+0x330>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d031      	beq.n	800127e <HAL_GPIO_Init+0x23a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a56      	ldr	r2, [pc, #344]	@ (8001378 <HAL_GPIO_Init+0x334>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x236>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a55      	ldr	r2, [pc, #340]	@ (800137c <HAL_GPIO_Init+0x338>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x232>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a54      	ldr	r2, [pc, #336]	@ (8001380 <HAL_GPIO_Init+0x33c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a53      	ldr	r2, [pc, #332]	@ (8001384 <HAL_GPIO_Init+0x340>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x22a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	@ (8001388 <HAL_GPIO_Init+0x344>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a51      	ldr	r2, [pc, #324]	@ (800138c <HAL_GPIO_Init+0x348>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a50      	ldr	r2, [pc, #320]	@ (8001390 <HAL_GPIO_Init+0x34c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4f      	ldr	r2, [pc, #316]	@ (8001394 <HAL_GPIO_Init+0x350>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x21a>
 800125a:	2309      	movs	r3, #9
 800125c:	e012      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800125e:	230a      	movs	r3, #10
 8001260:	e010      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001262:	2308      	movs	r3, #8
 8001264:	e00e      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001266:	2307      	movs	r3, #7
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800126a:	2306      	movs	r3, #6
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	@ (800136c <HAL_GPIO_Init+0x328>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <HAL_GPIO_Init+0x354>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a34      	ldr	r2, [pc, #208]	@ (8001398 <HAL_GPIO_Init+0x354>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <HAL_GPIO_Init+0x354>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a29      	ldr	r2, [pc, #164]	@ (8001398 <HAL_GPIO_Init+0x354>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <HAL_GPIO_Init+0x354>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131a:	4a1f      	ldr	r2, [pc, #124]	@ (8001398 <HAL_GPIO_Init+0x354>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_GPIO_Init+0x354>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001344:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <HAL_GPIO_Init+0x354>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f ae86 	bls.w	8001064 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40021c00 	.word	0x40021c00
 8001390:	40022000 	.word	0x40022000
 8001394:	40022400 	.word	0x40022400
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	041a      	lsls	r2, r3, #16
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	400b      	ands	r3, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e08b      	b.n	800152e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f003 fa24 	bl	8004878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2224      	movs	r2, #36	@ 0x24
 8001434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e006      	b.n	800148c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800148a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d108      	bne.n	80014a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	e007      	b.n	80014b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <HAL_I2C_Init+0x134>)
 80014c2:	430b      	orrs	r3, r1
 80014c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69d9      	ldr	r1, [r3, #28]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	02008000 	.word	0x02008000

0800153c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b20      	cmp	r3, #32
 8001550:	d138      	bne.n	80015c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800155c:	2302      	movs	r3, #2
 800155e:	e032      	b.n	80015c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	@ 0x24
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800158e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d139      	bne.n	800165c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e033      	b.n	800165e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2224      	movs	r2, #36	@ 0x24
 8001602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001624:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e000      	b.n	800165e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800165c:	2302      	movs	r3, #2
  }
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af02      	add	r7, sp, #8
 8001670:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e108      	b.n	800188e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f003 fcb4 	bl	8005004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016aa:	d102      	bne.n	80016b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fc60 	bl	8003f7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7c1a      	ldrb	r2, [r3, #16]
 80016c4:	f88d 2000 	strb.w	r2, [sp]
 80016c8:	3304      	adds	r3, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	f002 fbfc 	bl	8003ec8 <USB_CoreInit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0d5      	b.n	800188e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fc58 	bl	8003f9e <USB_SetCurrentMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0c6      	b.n	800188e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e04a      	b.n	800179c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3315      	adds	r3, #21
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3314      	adds	r3, #20
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	b298      	uxth	r0, r3
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	332e      	adds	r3, #46	@ 0x2e
 8001742:	4602      	mov	r2, r0
 8001744:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3318      	adds	r3, #24
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	331c      	adds	r3, #28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3320      	adds	r3, #32
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	3324      	adds	r3, #36	@ 0x24
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	3301      	adds	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3af      	bcc.n	8001706 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e044      	b.n	8001836 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	3301      	adds	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3b5      	bcc.n	80017ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7c1a      	ldrb	r2, [r3, #16]
 8001848:	f88d 2000 	strb.w	r2, [sp]
 800184c:	3304      	adds	r3, #4
 800184e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001850:	f002 fbf2 	bl	8004038 <USB_DevInit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e013      	b.n	800188e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7b1b      	ldrb	r3, [r3, #12]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f80b 	bl	8001898 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fdad 	bl	80043e6 <USB_DevDisconnect>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_PCDEx_ActivateLPM+0x44>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	10000003 	.word	0x10000003

080018e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR1;
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f023 0303 	bic.w	r3, r3, #3
 800191c:	60fb      	str	r3, [r7, #12]

  /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
  tmpreg |= Regulator;
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR1 = tmpreg;
 8001926:	4a11      	ldr	r2, [pc, #68]	@ (800196c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800192c:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_PWR_EnterSTOPMode+0x70>)
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_PWR_EnterSTOPMode+0x70>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001938:	f3bf 8f4f 	dsb	sy
}
 800193c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800193e:	f3bf 8f6f 	isb	sy
}
 8001942:	bf00      	nop
  /* Ensure that all instructions done before entering STOP mode */
  __DSB();
  __ISB();

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_PWR_EnterSTOPMode+0x4e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800194a:	bf30      	wfi
 800194c:	e002      	b.n	8001954 <HAL_PWR_EnterSTOPMode+0x54>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800194e:	bf40      	sev
    __WFE();
 8001950:	bf20      	wfe
    __WFE();
 8001952:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_PWR_EnterSTOPMode+0x70>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <HAL_PWR_EnterSTOPMode+0x70>)
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	6113      	str	r3, [r2, #16]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40007000 	.word	0x40007000
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_PWR_EnableSEVOnPend+0x1c>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_PWR_EnableSEVOnPend+0x1c>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6113      	str	r3, [r2, #16]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e291      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8087 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b8:	4b96      	ldr	r3, [pc, #600]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00c      	beq.n	80019de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c4:	4b93      	ldr	r3, [pc, #588]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
 80019d0:	4b90      	ldr	r3, [pc, #576]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b8d      	ldr	r3, [pc, #564]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x130>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d168      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e26b      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7a>
 8001a00:	4b84      	ldr	r3, [pc, #528]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a83      	ldr	r2, [pc, #524]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x9c>
 8001a16:	4b7f      	ldr	r3, [pc, #508]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b7c      	ldr	r3, [pc, #496]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7b      	ldr	r2, [pc, #492]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a3a:	4b76      	ldr	r3, [pc, #472]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b73      	ldr	r3, [pc, #460]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a72      	ldr	r2, [pc, #456]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a54:	4b6f      	ldr	r3, [pc, #444]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6e      	ldr	r2, [pc, #440]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b6c      	ldr	r3, [pc, #432]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6b      	ldr	r2, [pc, #428]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7fe fdee 	bl	8000654 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7fe fdea 	bl	8000654 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e21f      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b61      	ldr	r3, [pc, #388]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fdda 	bl	8000654 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7fe fdd6 	bl	8000654 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e20b      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b57      	ldr	r3, [pc, #348]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x110>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d069      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	4b50      	ldr	r3, [pc, #320]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	4b4d      	ldr	r3, [pc, #308]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x190>
 8001aea:	4b4a      	ldr	r3, [pc, #296]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b47      	ldr	r3, [pc, #284]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1df      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b41      	ldr	r3, [pc, #260]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	493d      	ldr	r1, [pc, #244]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e040      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d023      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b39      	ldr	r3, [pc, #228]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a38      	ldr	r2, [pc, #224]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7fe fd8c 	bl	8000654 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7fe fd88 	bl	8000654 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1bd      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b30      	ldr	r3, [pc, #192]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4929      	ldr	r1, [pc, #164]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a26      	ldr	r2, [pc, #152]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7fe fd68 	bl	8000654 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7fe fd64 	bl	8000654 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e199      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d038      	beq.n	8001c24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbe:	4a15      	ldr	r2, [pc, #84]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7fe fd45 	bl	8000654 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7fe fd41 	bl	8000654 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e176      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x23a>
 8001bec:	e01a      	b.n	8001c24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf2:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7fe fd2b 	bl	8000654 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c02:	f7fe fd27 	bl	8000654 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d903      	bls.n	8001c18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e15c      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
 8001c14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b91      	ldr	r3, [pc, #580]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a4 	beq.w	8001d7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b8b      	ldr	r3, [pc, #556]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b88      	ldr	r3, [pc, #544]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a87      	ldr	r2, [pc, #540]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b85      	ldr	r3, [pc, #532]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5a:	4b82      	ldr	r3, [pc, #520]	@ (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c66:	4b7f      	ldr	r3, [pc, #508]	@ (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7fe fcef 	bl	8000654 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7fe fceb 	bl	8000654 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	@ 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e120      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x31a>
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x33c>
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cba:	4a69      	ldr	r2, [pc, #420]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc2:	4b67      	ldr	r3, [pc, #412]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc6:	4a66      	ldr	r2, [pc, #408]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x35e>
 8001cd8:	4b61      	ldr	r3, [pc, #388]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a60      	ldr	r2, [pc, #384]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfe:	4b58      	ldr	r3, [pc, #352]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	4a57      	ldr	r2, [pc, #348]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7fe fc9f 	bl	8000654 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7fe fc9b 	bl	8000654 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0ce      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ee      	beq.n	8001d1a <HAL_RCC_OscConfig+0x386>
 8001d3c:	e014      	b.n	8001d68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7fe fc89 	bl	8000654 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7fe fc85 	bl	8000654 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	4b40      	ldr	r3, [pc, #256]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	4a3b      	ldr	r2, [pc, #236]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80a4 	beq.w	8001ecc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	4b36      	ldr	r3, [pc, #216]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d06b      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d149      	bne.n	8001e2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a30      	ldr	r2, [pc, #192]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe fc56 	bl	8000654 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe fc52 	bl	8000654 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e087      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	4313      	orrs	r3, r2
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001df6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe fc26 	bl	8000654 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fc22 	bl	8000654 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e057      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x478>
 8001e2a:	e04f      	b.n	8001ecc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0b      	ldr	r2, [pc, #44]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7fe fc0c 	bl	8000654 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fc08 	bl	8000654 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e03d      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4ac>
 8001e5e:	e035      	b.n	8001ecc <HAL_RCC_OscConfig+0x538>
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_RCC_OscConfig+0x544>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d028      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d121      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d11a      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0d0      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d910      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b67      	ldr	r3, [pc, #412]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	4965      	ldr	r1, [pc, #404]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b63      	ldr	r3, [pc, #396]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a58      	ldr	r2, [pc, #352]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	4b53      	ldr	r3, [pc, #332]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a52      	ldr	r2, [pc, #328]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b50      	ldr	r3, [pc, #320]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	494d      	ldr	r1, [pc, #308]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d040      	beq.n	8002000 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e073      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06b      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b39      	ldr	r3, [pc, #228]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4936      	ldr	r1, [pc, #216]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fb40 	bl	8000654 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f7fe fb3c 	bl	8000654 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e053      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1eb      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b27      	ldr	r3, [pc, #156]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d210      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b24      	ldr	r3, [pc, #144]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 020f 	bic.w	r2, r3, #15
 8002016:	4922      	ldr	r1, [pc, #136]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e032      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4916      	ldr	r1, [pc, #88]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206e:	f000 f821 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490a      	ldr	r1, [pc, #40]	@ (80020a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1d0>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1d4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa9c 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023c00 	.word	0x40023c00
 80020a4:	40023800 	.word	0x40023800
 80020a8:	08005af0 	.word	0x08005af0
 80020ac:	20000008 	.word	0x20000008
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b8:	b094      	sub	sp, #80	@ 0x50
 80020ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	@ 0x44
 80020c0:	2300      	movs	r3, #0
 80020c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020c4:	2300      	movs	r3, #0
 80020c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020cc:	4b79      	ldr	r3, [pc, #484]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d00d      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x40>
 80020d8:	2b08      	cmp	r3, #8
 80020da:	f200 80e1 	bhi.w	80022a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x34>
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x3a>
 80020e6:	e0db      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e8:	4b73      	ldr	r3, [pc, #460]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020ec:	e0db      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ee:	4b73      	ldr	r3, [pc, #460]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x208>)
 80020f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020f2:	e0d8      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f4:	4b6f      	ldr	r3, [pc, #444]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020fe:	4b6d      	ldr	r3, [pc, #436]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210a:	4b6a      	ldr	r3, [pc, #424]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	2200      	movs	r2, #0
 8002112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	@ 0x34
 8002122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002126:	4622      	mov	r2, r4
 8002128:	462b      	mov	r3, r5
 800212a:	f04f 0000 	mov.w	r0, #0
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	0159      	lsls	r1, r3, #5
 8002134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002138:	0150      	lsls	r0, r2, #5
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4621      	mov	r1, r4
 8002140:	1a51      	subs	r1, r2, r1
 8002142:	6139      	str	r1, [r7, #16]
 8002144:	4629      	mov	r1, r5
 8002146:	eb63 0301 	sbc.w	r3, r3, r1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002158:	4659      	mov	r1, fp
 800215a:	018b      	lsls	r3, r1, #6
 800215c:	4651      	mov	r1, sl
 800215e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002162:	4651      	mov	r1, sl
 8002164:	018a      	lsls	r2, r1, #6
 8002166:	4651      	mov	r1, sl
 8002168:	ebb2 0801 	subs.w	r8, r2, r1
 800216c:	4659      	mov	r1, fp
 800216e:	eb63 0901 	sbc.w	r9, r3, r1
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800217e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002186:	4690      	mov	r8, r2
 8002188:	4699      	mov	r9, r3
 800218a:	4623      	mov	r3, r4
 800218c:	eb18 0303 	adds.w	r3, r8, r3
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	462b      	mov	r3, r5
 8002194:	eb49 0303 	adc.w	r3, r9, r3
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021a6:	4629      	mov	r1, r5
 80021a8:	024b      	lsls	r3, r1, #9
 80021aa:	4621      	mov	r1, r4
 80021ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021b0:	4621      	mov	r1, r4
 80021b2:	024a      	lsls	r2, r1, #9
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ba:	2200      	movs	r2, #0
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021c4:	f7fe f87c 	bl	80002c0 <__aeabi_uldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4613      	mov	r3, r2
 80021ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021d0:	e058      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	4611      	mov	r1, r2
 80021de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021ec:	4642      	mov	r2, r8
 80021ee:	464b      	mov	r3, r9
 80021f0:	f04f 0000 	mov.w	r0, #0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	0159      	lsls	r1, r3, #5
 80021fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021fe:	0150      	lsls	r0, r2, #5
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4641      	mov	r1, r8
 8002206:	ebb2 0a01 	subs.w	sl, r2, r1
 800220a:	4649      	mov	r1, r9
 800220c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800221c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002224:	ebb2 040a 	subs.w	r4, r2, sl
 8002228:	eb63 050b 	sbc.w	r5, r3, fp
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	00eb      	lsls	r3, r5, #3
 8002236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800223a:	00e2      	lsls	r2, r4, #3
 800223c:	4614      	mov	r4, r2
 800223e:	461d      	mov	r5, r3
 8002240:	4643      	mov	r3, r8
 8002242:	18e3      	adds	r3, r4, r3
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	464b      	mov	r3, r9
 8002248:	eb45 0303 	adc.w	r3, r5, r3
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225a:	4629      	mov	r1, r5
 800225c:	028b      	lsls	r3, r1, #10
 800225e:	4621      	mov	r1, r4
 8002260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002264:	4621      	mov	r1, r4
 8002266:	028a      	lsls	r2, r1, #10
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226e:	2200      	movs	r2, #0
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	61fa      	str	r2, [r7, #28]
 8002274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002278:	f7fe f822 	bl	80002c0 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4613      	mov	r3, r2
 8002282:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002294:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800229e:	e002      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3750      	adds	r7, #80	@ 0x50
 80022ac:	46bd      	mov	sp, r7
 80022ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	00f42400 	.word	0x00f42400
 80022bc:	007a1200 	.word	0x007a1200

080022c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000008 	.word	0x20000008

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022dc:	f7ff fff0 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0a9b      	lsrs	r3, r3, #10
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	08005b00 	.word	0x08005b00

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002304:	f7ff ffdc 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	0b5b      	lsrs	r3, r3, #13
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	08005b00 	.word	0x08005b00

08002328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002350:	4b69      	ldr	r3, [pc, #420]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a68      	ldr	r2, [pc, #416]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002356:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	4b66      	ldr	r3, [pc, #408]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002364:	4964      	ldr	r1, [pc, #400]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002372:	2301      	movs	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002382:	4b5d      	ldr	r3, [pc, #372]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002388:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002390:	4959      	ldr	r1, [pc, #356]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023a0:	d101      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d017      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023be:	4b4e      	ldr	r3, [pc, #312]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	494a      	ldr	r1, [pc, #296]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 808b 	beq.w	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	4a39      	ldr	r2, [pc, #228]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	@ 0x40
 8002418:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002424:	4b35      	ldr	r3, [pc, #212]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a34      	ldr	r2, [pc, #208]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002430:	f7fe f910 	bl	8000654 <HAL_GetTick>
 8002434:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7fe f90c 	bl	8000654 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	@ 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e357      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800244a:	4b2c      	ldr	r3, [pc, #176]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800245e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d035      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d02e      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002474:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800247c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002488:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248e:	4a1a      	ldr	r2, [pc, #104]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002494:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800249c:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d114      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe f8d4 	bl	8000654 <HAL_GetTick>
 80024ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7fe f8d0 	bl	8000654 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e319      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ee      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024de:	d111      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024ec:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024ee:	400b      	ands	r3, r1
 80024f0:	4901      	ldr	r1, [pc, #4]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
 80024f6:	e00b      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000
 8002500:	0ffffcff 	.word	0x0ffffcff
 8002504:	4baa      	ldr	r3, [pc, #680]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4aa9      	ldr	r2, [pc, #676]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800250e:	6093      	str	r3, [r2, #8]
 8002510:	4ba7      	ldr	r3, [pc, #668]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002512:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	49a4      	ldr	r1, [pc, #656]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251e:	4313      	orrs	r3, r2
 8002520:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800252e:	4ba0      	ldr	r3, [pc, #640]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002534:	4a9e      	ldr	r2, [pc, #632]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002536:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800253a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800253e:	4b9c      	ldr	r3, [pc, #624]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002540:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	4999      	ldr	r1, [pc, #612]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255c:	4b94      	ldr	r3, [pc, #592]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800256a:	4991      	ldr	r1, [pc, #580]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800257e:	4b8c      	ldr	r3, [pc, #560]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800258c:	4988      	ldr	r1, [pc, #544]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a0:	4b83      	ldr	r3, [pc, #524]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ae:	4980      	ldr	r1, [pc, #512]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025c2:	4b7b      	ldr	r3, [pc, #492]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d0:	4977      	ldr	r1, [pc, #476]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e4:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	496f      	ldr	r1, [pc, #444]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002606:	4b6a      	ldr	r3, [pc, #424]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260c:	f023 020c 	bic.w	r2, r3, #12
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002614:	4966      	ldr	r1, [pc, #408]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002628:	4b61      	ldr	r3, [pc, #388]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	495e      	ldr	r1, [pc, #376]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800264a:	4b59      	ldr	r3, [pc, #356]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002650:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002658:	4955      	ldr	r1, [pc, #340]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800266c:	4b50      	ldr	r3, [pc, #320]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	494d      	ldr	r1, [pc, #308]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800268e:	4b48      	ldr	r3, [pc, #288]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002694:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	4944      	ldr	r1, [pc, #272]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026b0:	4b3f      	ldr	r3, [pc, #252]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	493c      	ldr	r1, [pc, #240]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026d2:	4b37      	ldr	r3, [pc, #220]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e0:	4933      	ldr	r1, [pc, #204]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026f4:	4b2e      	ldr	r3, [pc, #184]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002702:	492b      	ldr	r1, [pc, #172]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d011      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002716:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002724:	4922      	ldr	r1, [pc, #136]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002734:	d101      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002756:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002764:	4912      	ldr	r1, [pc, #72]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002778:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002788:	4909      	ldr	r1, [pc, #36]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d006      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80d9 	beq.w	8002956 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027a4:	4b02      	ldr	r3, [pc, #8]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a01      	ldr	r2, [pc, #4]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027ae:	e001      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fd ff4d 	bl	8000654 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027be:	f7fd ff49 	bl	8000654 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	@ 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e194      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d021      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11d      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027f0:	4b64      	ldr	r3, [pc, #400]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027fe:	4b61      	ldr	r3, [pc, #388]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002804:	0e1b      	lsrs	r3, r3, #24
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	019a      	lsls	r2, r3, #6
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	071b      	lsls	r3, r3, #28
 8002824:	4957      	ldr	r1, [pc, #348]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	d02e      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002856:	d129      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002858:	4b4a      	ldr	r3, [pc, #296]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002866:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286c:	0f1b      	lsrs	r3, r3, #28
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	019a      	lsls	r2, r3, #6
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	071b      	lsls	r3, r3, #28
 800288c:	493d      	ldr	r1, [pc, #244]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002894:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289a:	f023 021f 	bic.w	r2, r3, #31
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	3b01      	subs	r3, #1
 80028a4:	4937      	ldr	r1, [pc, #220]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01d      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028be:	0e1b      	lsrs	r3, r3, #24
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028cc:	0f1b      	lsrs	r3, r3, #28
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	019a      	lsls	r2, r3, #6
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	431a      	orrs	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	071b      	lsls	r3, r3, #28
 80028ec:	4925      	ldr	r1, [pc, #148]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d011      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	019a      	lsls	r2, r3, #6
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	061b      	lsls	r3, r3, #24
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	071b      	lsls	r3, r3, #28
 800291c:	4919      	ldr	r1, [pc, #100]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002924:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800292e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fd fe90 	bl	8000654 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002938:	f7fd fe8c 	bl	8000654 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	@ 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0d7      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 80cd 	bne.w	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296a:	f7fd fe73 	bl	8000654 <HAL_GetTick>
 800296e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002972:	f7fd fe6f 	bl	8000654 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b64      	cmp	r3, #100	@ 0x64
 800297e:	d903      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0ba      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002984:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002988:	4b5e      	ldr	r3, [pc, #376]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002994:	d0ed      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02e      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d12a      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029be:	4b51      	ldr	r3, [pc, #324]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d2:	0f1b      	lsrs	r3, r3, #28
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	019a      	lsls	r2, r3, #6
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	061b      	lsls	r3, r3, #24
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	4944      	ldr	r1, [pc, #272]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029fa:	4b42      	ldr	r3, [pc, #264]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a00:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	493d      	ldr	r1, [pc, #244]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d022      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a28:	d11d      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a2a:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a38:	4b32      	ldr	r3, [pc, #200]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3e:	0f1b      	lsrs	r3, r3, #28
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	019a      	lsls	r2, r3, #6
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	071b      	lsls	r3, r3, #28
 8002a5e:	4929      	ldr	r1, [pc, #164]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d028      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	0e1b      	lsrs	r3, r3, #24
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	019a      	lsls	r2, r3, #6
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	4917      	ldr	r1, [pc, #92]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	4911      	ldr	r1, [pc, #68]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad0:	f7fd fdc0 	bl	8000654 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ad8:	f7fd fdbc 	bl	8000654 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	@ 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e007      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af6:	d1ef      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e071      	b.n	8002c02 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7f5b      	ldrb	r3, [r3, #29]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f002 f8cc 	bl	8004ccc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d053      	beq.n	8002bf0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	22ca      	movs	r2, #202	@ 0xca
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2253      	movs	r2, #83	@ 0x53
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fbdf 	bl	800331c <RTC_EnterInitMode>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d12a      	bne.n	8002bbe <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b26      	ldr	r3, [pc, #152]	@ (8002c0c <HAL_RTC_Init+0x104>)
 8002b74:	400b      	ands	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6899      	ldr	r1, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6919      	ldr	r1, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	041a      	lsls	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fbe8 	bl	800338a <RTC_ExitInitMode>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d110      	bne.n	8002be6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0208 	bic.w	r2, r2, #8
 8002bd2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	22ff      	movs	r2, #255	@ 0xff
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bee:	e001      	b.n	8002bf4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	ff8fffbf 	.word	0xff8fffbf

08002c10 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	7f1b      	ldrb	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_RTC_SetTime+0x1c>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e085      	b.n	8002d38 <HAL_RTC_SetTime+0x128>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d126      	bne.n	8002c8c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fbbc 	bl	80033d4 <RTC_ByteToBcd2>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	785b      	ldrb	r3, [r3, #1]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fbb5 	bl	80033d4 <RTC_ByteToBcd2>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c6e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	789b      	ldrb	r3, [r3, #2]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fbad 	bl	80033d4 <RTC_ByteToBcd2>
 8002c7a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c7c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	78db      	ldrb	r3, [r3, #3]
 8002c84:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e018      	b.n	8002cbe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002cac:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002cb2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	78db      	ldrb	r3, [r3, #3]
 8002cb8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	22ca      	movs	r2, #202	@ 0xca
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2253      	movs	r2, #83	@ 0x53
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fb24 	bl	800331c <RTC_EnterInitMode>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11e      	bne.n	8002d1c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	6979      	ldr	r1, [r7, #20]
 8002ce4:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <HAL_RTC_SetTime+0x130>)
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002cf8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb39 	bl	800338a <RTC_ExitInitMode>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	22ff      	movs	r2, #255	@ 0xff
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	771a      	strb	r2, [r3, #28]

  return status;
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	007f7f7f 	.word	0x007f7f7f

08002d44 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <HAL_RTC_GetTime+0xb8>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	0d9b      	lsrs	r3, r3, #22
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11a      	bne.n	8002df2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fb25 	bl	8003410 <RTC_Bcd2ToByte>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fb1c 	bl	8003410 <RTC_Bcd2ToByte>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	789b      	ldrb	r3, [r3, #2]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fb13 	bl	8003410 <RTC_Bcd2ToByte>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	007f7f7f 	.word	0x007f7f7f

08002e00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	7f1b      	ldrb	r3, [r3, #28]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_RTC_SetDate+0x1c>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e06f      	b.n	8002efc <HAL_RTC_SetDate+0xfc>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2202      	movs	r2, #2
 8002e26:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10e      	bne.n	8002e4c <HAL_RTC_SetDate+0x4c>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	785b      	ldrb	r3, [r3, #1]
 8002e3e:	f023 0310 	bic.w	r3, r3, #16
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	330a      	adds	r3, #10
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11c      	bne.n	8002e8c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	78db      	ldrb	r3, [r3, #3]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fabc 	bl	80033d4 <RTC_ByteToBcd2>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	785b      	ldrb	r3, [r3, #1]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fab5 	bl	80033d4 <RTC_ByteToBcd2>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e6e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	789b      	ldrb	r3, [r3, #2]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 faad 	bl	80033d4 <RTC_ByteToBcd2>
 8002e7a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e7c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e00e      	b.n	8002eaa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	78db      	ldrb	r3, [r3, #3]
 8002e90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	785b      	ldrb	r3, [r3, #1]
 8002e96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e98:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	22ca      	movs	r2, #202	@ 0xca
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2253      	movs	r2, #83	@ 0x53
 8002eb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa2e 	bl	800331c <RTC_EnterInitMode>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <HAL_RTC_SetDate+0x104>)
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa57 	bl	800338a <RTC_ExitInitMode>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	22ff      	movs	r2, #255	@ 0xff
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	771a      	strb	r2, [r3, #28]

  return status;
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}
 8002f04:	00ffff3f 	.word	0x00ffff3f

08002f08 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4b21      	ldr	r3, [pc, #132]	@ (8002fa4 <HAL_RTC_GetDate+0x9c>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11a      	bne.n	8002f98 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	78db      	ldrb	r3, [r3, #3]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa52 	bl	8003410 <RTC_Bcd2ToByte>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fa49 	bl	8003410 <RTC_Bcd2ToByte>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa40 	bl	8003410 <RTC_Bcd2ToByte>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	00ffff3f 	.word	0x00ffff3f

08002fa8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002fb4:	4b9b      	ldr	r3, [pc, #620]	@ (8003224 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a9b      	ldr	r2, [pc, #620]	@ (8003228 <HAL_RTC_SetAlarm_IT+0x280>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	7f1b      	ldrb	r3, [r3, #28]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_RTC_SetAlarm_IT+0x36>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e11e      	b.n	800321c <HAL_RTC_SetAlarm_IT+0x274>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d137      	bne.n	8003060 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2200      	movs	r2, #0
 8003002:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f9e3 	bl	80033d4 <RTC_ByteToBcd2>
 800300e:	4603      	mov	r3, r0
 8003010:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f9dc 	bl	80033d4 <RTC_ByteToBcd2>
 800301c:	4603      	mov	r3, r0
 800301e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003020:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	789b      	ldrb	r3, [r3, #2]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f9d4 	bl	80033d4 <RTC_ByteToBcd2>
 800302c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800302e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	78db      	ldrb	r3, [r3, #3]
 8003036:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003038:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f9c6 	bl	80033d4 <RTC_ByteToBcd2>
 8003048:	4603      	mov	r3, r0
 800304a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800304c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003054:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800305a:	4313      	orrs	r3, r2
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e023      	b.n	80030a8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003080:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003086:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	78db      	ldrb	r3, [r3, #3]
 800308c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800308e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003096:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003098:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800309e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	22ca      	movs	r2, #202	@ 0xca
 80030ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2253      	movs	r2, #83	@ 0x53
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030cc:	d142      	bne.n	8003154 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030dc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80030ee:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	22ff      	movs	r2, #255	@ 0xff
 8003102:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2203      	movs	r2, #3
 8003108:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e083      	b.n	800321c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0e6      	beq.n	80030f0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003140:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	e04c      	b.n	80031ee <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003162:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003174:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003176:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2b      	ldr	r2, [pc, #172]	@ (8003228 <HAL_RTC_SetAlarm_IT+0x280>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	0adb      	lsrs	r3, r3, #11
 8003182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3b01      	subs	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	22ff      	movs	r2, #255	@ 0xff
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2203      	movs	r2, #3
 80031a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e035      	b.n	800321c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0e6      	beq.n	800318c <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031dc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031ec:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031ee:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <HAL_RTC_SetAlarm_IT+0x284>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a0e      	ldr	r2, [pc, #56]	@ (800322c <HAL_RTC_SetAlarm_IT+0x284>)
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80031fa:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <HAL_RTC_SetAlarm_IT+0x284>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a0b      	ldr	r2, [pc, #44]	@ (800322c <HAL_RTC_SetAlarm_IT+0x284>)
 8003200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003204:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	22ff      	movs	r2, #255	@ 0xff
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3724      	adds	r7, #36	@ 0x24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	20000008 	.word	0x20000008
 8003228:	10624dd3 	.word	0x10624dd3
 800322c:	40013c00 	.word	0x40013c00

08003230 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003238:	4b1f      	ldr	r3, [pc, #124]	@ (80032b8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800323a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800323e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800326c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f824 	bl	80032bc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80032a0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f900 	bl	80034a8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	775a      	strb	r2, [r3, #29]
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40013c00 	.word	0x40013c00

080032bc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <HAL_RTC_WaitForSynchro+0x48>)
 80032e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e4:	f7fd f9b6 	bl	8000654 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032ea:	e009      	b.n	8003300 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ec:	f7fd f9b2 	bl	8000654 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032fa:	d901      	bls.n	8003300 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e007      	b.n	8003310 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0ee      	beq.n	80032ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	0001ff5f 	.word	0x0001ff5f

0800331c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d122      	bne.n	8003380 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003348:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800334a:	f7fd f983 	bl	8000654 <HAL_GetTick>
 800334e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003350:	e00c      	b.n	800336c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003352:	f7fd f97f 	bl	8000654 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003360:	d904      	bls.n	800336c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2204      	movs	r2, #4
 8003366:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <RTC_EnterInitMode+0x64>
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d1e8      	bne.n	8003352 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff8b 	bl	80032d0 <HAL_RTC_WaitForSynchro>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2204      	movs	r2, #4
 80033c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80033e2:	e005      	b.n	80033f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3301      	adds	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	3b0a      	subs	r3, #10
 80033ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b09      	cmp	r3, #9
 80033f4:	d8f6      	bhi.n	80033e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	4313      	orrs	r3, r2
 8003402:	b2db      	uxtb	r3, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4413      	add	r3, r2
 800343e:	b2db      	uxtb	r3, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003456:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800345a:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800347a:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f809 	bl	8003494 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	775a      	strb	r2, [r3, #29]
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e040      	b.n	8003550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f001 fd02 	bl	8004ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	@ 0x24
 80034e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fb16 	bl	8003b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f8af 	bl	800366c <UART_SetConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e01b      	b.n	8003550 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fb95 	bl	8003c78 <UART_CheckIdleState>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	@ 0x28
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800356c:	2b20      	cmp	r3, #32
 800356e:	d177      	bne.n	8003660 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x24>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e070      	b.n	8003662 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2221      	movs	r2, #33	@ 0x21
 800358c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358e:	f7fd f861 	bl	8000654 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ac:	d108      	bne.n	80035c0 <HAL_UART_Transmit+0x68>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e003      	b.n	80035c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c8:	e02f      	b.n	800362a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	@ 0x80
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fba6 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e03b      	b.n	8003662 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	3302      	adds	r3, #2
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e007      	b.n	8003618 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3301      	adds	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1c9      	bne.n	80035ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2140      	movs	r1, #64	@ 0x40
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fb70 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e005      	b.n	8003662 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4ba6      	ldr	r3, [pc, #664]	@ (8003930 <UART_SetConfig+0x2c4>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a94      	ldr	r2, [pc, #592]	@ (8003934 <UART_SetConfig+0x2c8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d120      	bne.n	800372a <UART_SetConfig+0xbe>
 80036e8:	4b93      	ldr	r3, [pc, #588]	@ (8003938 <UART_SetConfig+0x2cc>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d816      	bhi.n	8003724 <UART_SetConfig+0xb8>
 80036f6:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <UART_SetConfig+0x90>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	08003719 	.word	0x08003719
 8003704:	08003713 	.word	0x08003713
 8003708:	0800371f 	.word	0x0800371f
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e150      	b.n	80039b4 <UART_SetConfig+0x348>
 8003712:	2302      	movs	r3, #2
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e14d      	b.n	80039b4 <UART_SetConfig+0x348>
 8003718:	2304      	movs	r3, #4
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e14a      	b.n	80039b4 <UART_SetConfig+0x348>
 800371e:	2308      	movs	r3, #8
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e147      	b.n	80039b4 <UART_SetConfig+0x348>
 8003724:	2310      	movs	r3, #16
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e144      	b.n	80039b4 <UART_SetConfig+0x348>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a83      	ldr	r2, [pc, #524]	@ (800393c <UART_SetConfig+0x2d0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d132      	bne.n	800379a <UART_SetConfig+0x12e>
 8003734:	4b80      	ldr	r3, [pc, #512]	@ (8003938 <UART_SetConfig+0x2cc>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d828      	bhi.n	8003794 <UART_SetConfig+0x128>
 8003742:	a201      	add	r2, pc, #4	@ (adr r2, 8003748 <UART_SetConfig+0xdc>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800377d 	.word	0x0800377d
 800374c:	08003795 	.word	0x08003795
 8003750:	08003795 	.word	0x08003795
 8003754:	08003795 	.word	0x08003795
 8003758:	08003789 	.word	0x08003789
 800375c:	08003795 	.word	0x08003795
 8003760:	08003795 	.word	0x08003795
 8003764:	08003795 	.word	0x08003795
 8003768:	08003783 	.word	0x08003783
 800376c:	08003795 	.word	0x08003795
 8003770:	08003795 	.word	0x08003795
 8003774:	08003795 	.word	0x08003795
 8003778:	0800378f 	.word	0x0800378f
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e118      	b.n	80039b4 <UART_SetConfig+0x348>
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e115      	b.n	80039b4 <UART_SetConfig+0x348>
 8003788:	2304      	movs	r3, #4
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e112      	b.n	80039b4 <UART_SetConfig+0x348>
 800378e:	2308      	movs	r3, #8
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e10f      	b.n	80039b4 <UART_SetConfig+0x348>
 8003794:	2310      	movs	r3, #16
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e10c      	b.n	80039b4 <UART_SetConfig+0x348>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a68      	ldr	r2, [pc, #416]	@ (8003940 <UART_SetConfig+0x2d4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d120      	bne.n	80037e6 <UART_SetConfig+0x17a>
 80037a4:	4b64      	ldr	r3, [pc, #400]	@ (8003938 <UART_SetConfig+0x2cc>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037ae:	2b30      	cmp	r3, #48	@ 0x30
 80037b0:	d013      	beq.n	80037da <UART_SetConfig+0x16e>
 80037b2:	2b30      	cmp	r3, #48	@ 0x30
 80037b4:	d814      	bhi.n	80037e0 <UART_SetConfig+0x174>
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d009      	beq.n	80037ce <UART_SetConfig+0x162>
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d810      	bhi.n	80037e0 <UART_SetConfig+0x174>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <UART_SetConfig+0x15c>
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d006      	beq.n	80037d4 <UART_SetConfig+0x168>
 80037c6:	e00b      	b.n	80037e0 <UART_SetConfig+0x174>
 80037c8:	2300      	movs	r3, #0
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e0f2      	b.n	80039b4 <UART_SetConfig+0x348>
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e0ef      	b.n	80039b4 <UART_SetConfig+0x348>
 80037d4:	2304      	movs	r3, #4
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e0ec      	b.n	80039b4 <UART_SetConfig+0x348>
 80037da:	2308      	movs	r3, #8
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e0e9      	b.n	80039b4 <UART_SetConfig+0x348>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e0e6      	b.n	80039b4 <UART_SetConfig+0x348>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a56      	ldr	r2, [pc, #344]	@ (8003944 <UART_SetConfig+0x2d8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d120      	bne.n	8003832 <UART_SetConfig+0x1c6>
 80037f0:	4b51      	ldr	r3, [pc, #324]	@ (8003938 <UART_SetConfig+0x2cc>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80037fc:	d013      	beq.n	8003826 <UART_SetConfig+0x1ba>
 80037fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003800:	d814      	bhi.n	800382c <UART_SetConfig+0x1c0>
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d009      	beq.n	800381a <UART_SetConfig+0x1ae>
 8003806:	2b80      	cmp	r3, #128	@ 0x80
 8003808:	d810      	bhi.n	800382c <UART_SetConfig+0x1c0>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <UART_SetConfig+0x1a8>
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d006      	beq.n	8003820 <UART_SetConfig+0x1b4>
 8003812:	e00b      	b.n	800382c <UART_SetConfig+0x1c0>
 8003814:	2300      	movs	r3, #0
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e0cc      	b.n	80039b4 <UART_SetConfig+0x348>
 800381a:	2302      	movs	r3, #2
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e0c9      	b.n	80039b4 <UART_SetConfig+0x348>
 8003820:	2304      	movs	r3, #4
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0c6      	b.n	80039b4 <UART_SetConfig+0x348>
 8003826:	2308      	movs	r3, #8
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0c3      	b.n	80039b4 <UART_SetConfig+0x348>
 800382c:	2310      	movs	r3, #16
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0c0      	b.n	80039b4 <UART_SetConfig+0x348>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a44      	ldr	r2, [pc, #272]	@ (8003948 <UART_SetConfig+0x2dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d125      	bne.n	8003888 <UART_SetConfig+0x21c>
 800383c:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <UART_SetConfig+0x2cc>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800384a:	d017      	beq.n	800387c <UART_SetConfig+0x210>
 800384c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003850:	d817      	bhi.n	8003882 <UART_SetConfig+0x216>
 8003852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003856:	d00b      	beq.n	8003870 <UART_SetConfig+0x204>
 8003858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385c:	d811      	bhi.n	8003882 <UART_SetConfig+0x216>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <UART_SetConfig+0x1fe>
 8003862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003866:	d006      	beq.n	8003876 <UART_SetConfig+0x20a>
 8003868:	e00b      	b.n	8003882 <UART_SetConfig+0x216>
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e0a1      	b.n	80039b4 <UART_SetConfig+0x348>
 8003870:	2302      	movs	r3, #2
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e09e      	b.n	80039b4 <UART_SetConfig+0x348>
 8003876:	2304      	movs	r3, #4
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e09b      	b.n	80039b4 <UART_SetConfig+0x348>
 800387c:	2308      	movs	r3, #8
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e098      	b.n	80039b4 <UART_SetConfig+0x348>
 8003882:	2310      	movs	r3, #16
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e095      	b.n	80039b4 <UART_SetConfig+0x348>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2f      	ldr	r2, [pc, #188]	@ (800394c <UART_SetConfig+0x2e0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d125      	bne.n	80038de <UART_SetConfig+0x272>
 8003892:	4b29      	ldr	r3, [pc, #164]	@ (8003938 <UART_SetConfig+0x2cc>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800389c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a0:	d017      	beq.n	80038d2 <UART_SetConfig+0x266>
 80038a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a6:	d817      	bhi.n	80038d8 <UART_SetConfig+0x26c>
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ac:	d00b      	beq.n	80038c6 <UART_SetConfig+0x25a>
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b2:	d811      	bhi.n	80038d8 <UART_SetConfig+0x26c>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <UART_SetConfig+0x254>
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038bc:	d006      	beq.n	80038cc <UART_SetConfig+0x260>
 80038be:	e00b      	b.n	80038d8 <UART_SetConfig+0x26c>
 80038c0:	2301      	movs	r3, #1
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e076      	b.n	80039b4 <UART_SetConfig+0x348>
 80038c6:	2302      	movs	r3, #2
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e073      	b.n	80039b4 <UART_SetConfig+0x348>
 80038cc:	2304      	movs	r3, #4
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e070      	b.n	80039b4 <UART_SetConfig+0x348>
 80038d2:	2308      	movs	r3, #8
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e06d      	b.n	80039b4 <UART_SetConfig+0x348>
 80038d8:	2310      	movs	r3, #16
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e06a      	b.n	80039b4 <UART_SetConfig+0x348>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003950 <UART_SetConfig+0x2e4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d138      	bne.n	800395a <UART_SetConfig+0x2ee>
 80038e8:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <UART_SetConfig+0x2cc>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80038f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038f6:	d017      	beq.n	8003928 <UART_SetConfig+0x2bc>
 80038f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038fc:	d82a      	bhi.n	8003954 <UART_SetConfig+0x2e8>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003902:	d00b      	beq.n	800391c <UART_SetConfig+0x2b0>
 8003904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003908:	d824      	bhi.n	8003954 <UART_SetConfig+0x2e8>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <UART_SetConfig+0x2aa>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003912:	d006      	beq.n	8003922 <UART_SetConfig+0x2b6>
 8003914:	e01e      	b.n	8003954 <UART_SetConfig+0x2e8>
 8003916:	2300      	movs	r3, #0
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e04b      	b.n	80039b4 <UART_SetConfig+0x348>
 800391c:	2302      	movs	r3, #2
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e048      	b.n	80039b4 <UART_SetConfig+0x348>
 8003922:	2304      	movs	r3, #4
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e045      	b.n	80039b4 <UART_SetConfig+0x348>
 8003928:	2308      	movs	r3, #8
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e042      	b.n	80039b4 <UART_SetConfig+0x348>
 800392e:	bf00      	nop
 8003930:	efff69f3 	.word	0xefff69f3
 8003934:	40011000 	.word	0x40011000
 8003938:	40023800 	.word	0x40023800
 800393c:	40004400 	.word	0x40004400
 8003940:	40004800 	.word	0x40004800
 8003944:	40004c00 	.word	0x40004c00
 8003948:	40005000 	.word	0x40005000
 800394c:	40011400 	.word	0x40011400
 8003950:	40007800 	.word	0x40007800
 8003954:	2310      	movs	r3, #16
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e02c      	b.n	80039b4 <UART_SetConfig+0x348>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a72      	ldr	r2, [pc, #456]	@ (8003b28 <UART_SetConfig+0x4bc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d125      	bne.n	80039b0 <UART_SetConfig+0x344>
 8003964:	4b71      	ldr	r3, [pc, #452]	@ (8003b2c <UART_SetConfig+0x4c0>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800396e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003972:	d017      	beq.n	80039a4 <UART_SetConfig+0x338>
 8003974:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003978:	d817      	bhi.n	80039aa <UART_SetConfig+0x33e>
 800397a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397e:	d00b      	beq.n	8003998 <UART_SetConfig+0x32c>
 8003980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003984:	d811      	bhi.n	80039aa <UART_SetConfig+0x33e>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <UART_SetConfig+0x326>
 800398a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398e:	d006      	beq.n	800399e <UART_SetConfig+0x332>
 8003990:	e00b      	b.n	80039aa <UART_SetConfig+0x33e>
 8003992:	2300      	movs	r3, #0
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e00d      	b.n	80039b4 <UART_SetConfig+0x348>
 8003998:	2302      	movs	r3, #2
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e00a      	b.n	80039b4 <UART_SetConfig+0x348>
 800399e:	2304      	movs	r3, #4
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e007      	b.n	80039b4 <UART_SetConfig+0x348>
 80039a4:	2308      	movs	r3, #8
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e004      	b.n	80039b4 <UART_SetConfig+0x348>
 80039aa:	2310      	movs	r3, #16
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e001      	b.n	80039b4 <UART_SetConfig+0x348>
 80039b0:	2310      	movs	r3, #16
 80039b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039bc:	d15b      	bne.n	8003a76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039be:	7ffb      	ldrb	r3, [r7, #31]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d828      	bhi.n	8003a16 <UART_SetConfig+0x3aa>
 80039c4:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <UART_SetConfig+0x360>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	08003a01 	.word	0x08003a01
 80039d8:	08003a17 	.word	0x08003a17
 80039dc:	08003a07 	.word	0x08003a07
 80039e0:	08003a17 	.word	0x08003a17
 80039e4:	08003a17 	.word	0x08003a17
 80039e8:	08003a17 	.word	0x08003a17
 80039ec:	08003a0f 	.word	0x08003a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7fe fc72 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 80039f4:	61b8      	str	r0, [r7, #24]
        break;
 80039f6:	e013      	b.n	8003a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7fe fc82 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 80039fc:	61b8      	str	r0, [r7, #24]
        break;
 80039fe:	e00f      	b.n	8003a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b4b      	ldr	r3, [pc, #300]	@ (8003b30 <UART_SetConfig+0x4c4>)
 8003a02:	61bb      	str	r3, [r7, #24]
        break;
 8003a04:	e00c      	b.n	8003a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7fe fb55 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8003a0a:	61b8      	str	r0, [r7, #24]
        break;
 8003a0c:	e008      	b.n	8003a20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a12:	61bb      	str	r3, [r7, #24]
        break;
 8003a14:	e004      	b.n	8003a20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d074      	beq.n	8003b10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	005a      	lsls	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	d916      	bls.n	8003a70 <UART_SetConfig+0x404>
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a48:	d212      	bcs.n	8003a70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f023 030f 	bic.w	r3, r3, #15
 8003a52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	89fb      	ldrh	r3, [r7, #14]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	89fa      	ldrh	r2, [r7, #14]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e04f      	b.n	8003b10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	77bb      	strb	r3, [r7, #30]
 8003a74:	e04c      	b.n	8003b10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a76:	7ffb      	ldrb	r3, [r7, #31]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d828      	bhi.n	8003ace <UART_SetConfig+0x462>
 8003a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <UART_SetConfig+0x418>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003acf 	.word	0x08003acf
 8003aa0:	08003acf 	.word	0x08003acf
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7fe fc16 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8003aac:	61b8      	str	r0, [r7, #24]
        break;
 8003aae:	e013      	b.n	8003ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f7fe fc26 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	61b8      	str	r0, [r7, #24]
        break;
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <UART_SetConfig+0x4c4>)
 8003aba:	61bb      	str	r3, [r7, #24]
        break;
 8003abc:	e00c      	b.n	8003ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7fe faf9 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8003ac2:	61b8      	str	r0, [r7, #24]
        break;
 8003ac4:	e008      	b.n	8003ad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aca:	61bb      	str	r3, [r7, #24]
        break;
 8003acc:	e004      	b.n	8003ad8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ad6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d018      	beq.n	8003b10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	085a      	lsrs	r2, r3, #1
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	441a      	add	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d909      	bls.n	8003b0c <UART_SetConfig+0x4a0>
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afe:	d205      	bcs.n	8003b0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	e001      	b.n	8003b10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40007c00 	.word	0x40007c00
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	00f42400 	.word	0x00f42400

08003b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01a      	beq.n	8003c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c32:	d10a      	bne.n	8003c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	@ 0x30
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c88:	f7fc fce4 	bl	8000654 <HAL_GetTick>
 8003c8c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d12e      	bne.n	8003cfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f83b 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d021      	beq.n	8003cfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	69b9      	ldr	r1, [r7, #24]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e6      	bne.n	8003cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e011      	b.n	8003d1e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3728      	adds	r7, #40	@ 0x28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	e04f      	b.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d04b      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7fc fc88 	bl	8000654 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e04e      	b.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d037      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b80      	cmp	r3, #128	@ 0x80
 8003d6c:	d034      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b40      	cmp	r3, #64	@ 0x40
 8003d72:	d031      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d110      	bne.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2208      	movs	r2, #8
 8003d88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f838 	bl	8003e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2208      	movs	r2, #8
 8003d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e029      	b.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003db2:	d111      	bne.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f81e 	bl	8003e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e00f      	b.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d0a0      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b095      	sub	sp, #84	@ 0x54
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e6      	bne.n	8003e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3308      	adds	r3, #8
 8003e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d118      	bne.n	8003ea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e6      	bne.n	8003e76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ebc:	bf00      	nop
 8003ebe:	3754      	adds	r7, #84	@ 0x54
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ec8:	b084      	sub	sp, #16
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	f107 001c 	add.w	r0, r7, #28
 8003ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d121      	bne.n	8003f26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <USB_CoreInit+0xb0>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d105      	bne.n	8003f1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa92 	bl	8004444 <USB_CoreReset>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e010      	b.n	8003f48 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa86 	bl	8004444 <USB_CoreReset>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f48:	7fbb      	ldrb	r3, [r7, #30]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10b      	bne.n	8003f66 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f043 0206 	orr.w	r2, r3, #6
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f72:	b004      	add	sp, #16
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	ffbdffbf 	.word	0xffbdffbf

08003f7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 0201 	bic.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d115      	bne.n	8003fec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fcc:	200a      	movs	r0, #10
 8003fce:	f7fc fb4d 	bl	800066c <HAL_Delay>
      ms += 10U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	330a      	adds	r3, #10
 8003fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fa25 	bl	8004428 <USB_GetMode>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d01e      	beq.n	8004022 <USB_SetCurrentMode+0x84>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2bc7      	cmp	r3, #199	@ 0xc7
 8003fe8:	d9f0      	bls.n	8003fcc <USB_SetCurrentMode+0x2e>
 8003fea:	e01a      	b.n	8004022 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d115      	bne.n	800401e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f7fc fb34 	bl	800066c <HAL_Delay>
      ms += 10U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	330a      	adds	r3, #10
 8004008:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa0c 	bl	8004428 <USB_GetMode>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <USB_SetCurrentMode+0x84>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2bc7      	cmp	r3, #199	@ 0xc7
 800401a:	d9f0      	bls.n	8003ffe <USB_SetCurrentMode+0x60>
 800401c:	e001      	b.n	8004022 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e005      	b.n	800402e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2bc8      	cmp	r3, #200	@ 0xc8
 8004026:	d101      	bne.n	800402c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004038:	b084      	sub	sp, #16
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e009      	b.n	800406c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3340      	adds	r3, #64	@ 0x40
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3301      	adds	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b0e      	cmp	r3, #14
 8004070:	d9f2      	bls.n	8004058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004072:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004076:	2b00      	cmp	r3, #0
 8004078:	d11c      	bne.n	80040b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e005      	b.n	80040c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040c6:	461a      	mov	r2, r3
 80040c8:	2300      	movs	r3, #0
 80040ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10d      	bne.n	80040f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040dc:	2100      	movs	r1, #0
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f968 	bl	80043b4 <USB_SetDevSpeed>
 80040e4:	e008      	b.n	80040f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040e6:	2101      	movs	r1, #1
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f963 	bl	80043b4 <USB_SetDevSpeed>
 80040ee:	e003      	b.n	80040f8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040f0:	2103      	movs	r1, #3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f95e 	bl	80043b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040f8:	2110      	movs	r1, #16
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8fa 	bl	80042f4 <USB_FlushTxFifo>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f924 	bl	8004358 <USB_FlushRxFifo>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412c:	461a      	mov	r2, r3
 800412e:	2300      	movs	r3, #0
 8004130:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004138:	461a      	mov	r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e043      	b.n	80041cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800415a:	d118      	bne.n	800418e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416e:	461a      	mov	r2, r3
 8004170:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e013      	b.n	80041a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004184:	461a      	mov	r2, r3
 8004186:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e008      	b.n	80041a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	2300      	movs	r3, #0
 800419e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ac:	461a      	mov	r2, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041be:	461a      	mov	r2, r3
 80041c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3301      	adds	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041d0:	461a      	mov	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d3b5      	bcc.n	8004144 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e043      	b.n	8004266 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041f4:	d118      	bne.n	8004228 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004208:	461a      	mov	r2, r3
 800420a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e013      	b.n	800423a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e008      	b.n	800423a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800425e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3301      	adds	r3, #1
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800426a:	461a      	mov	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4293      	cmp	r3, r2
 8004270:	d3b5      	bcc.n	80041de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004284:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004292:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f043 0210 	orr.w	r2, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <USB_DevInit+0x2b4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f043 0208 	orr.w	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <USB_DevInit+0x2b8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042e8:	b004      	add	sp, #16
 80042ea:	4770      	bx	lr
 80042ec:	803c3800 	.word	0x803c3800
 80042f0:	40000004 	.word	0x40000004

080042f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3301      	adds	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800430e:	d901      	bls.n	8004314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e01b      	b.n	800434c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	daf2      	bge.n	8004302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004338:	d901      	bls.n	800433e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b20      	cmp	r3, #32
 8004348:	d0f0      	beq.n	800432c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004370:	d901      	bls.n	8004376 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e018      	b.n	80043a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	daf2      	bge.n	8004364 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2210      	movs	r2, #16
 8004386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004394:	d901      	bls.n	800439a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e006      	b.n	80043a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d0f0      	beq.n	8004388 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004400:	f023 0303 	bic.w	r3, r3, #3
 8004404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0301 	and.w	r3, r3, #1
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3301      	adds	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800445c:	d901      	bls.n	8004462 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e01b      	b.n	800449a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	daf2      	bge.n	8004450 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004486:	d901      	bls.n	800448c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e006      	b.n	800449a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d0f0      	beq.n	800447a <USB_CoreReset+0x36>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80044ac:	4b1f      	ldr	r3, [pc, #124]	@ (800452c <MX_ETH_Init+0x84>)
 80044ae:	4a20      	ldr	r2, [pc, #128]	@ (8004530 <MX_ETH_Init+0x88>)
 80044b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80044b2:	4b20      	ldr	r3, [pc, #128]	@ (8004534 <MX_ETH_Init+0x8c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80044b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004534 <MX_ETH_Init+0x8c>)
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80044be:	4b1d      	ldr	r3, [pc, #116]	@ (8004534 <MX_ETH_Init+0x8c>)
 80044c0:	22e1      	movs	r2, #225	@ 0xe1
 80044c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80044c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <MX_ETH_Init+0x8c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80044ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <MX_ETH_Init+0x8c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80044d0:	4b18      	ldr	r3, [pc, #96]	@ (8004534 <MX_ETH_Init+0x8c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <MX_ETH_Init+0x84>)
 80044d8:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <MX_ETH_Init+0x8c>)
 80044da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80044dc:	4b13      	ldr	r3, [pc, #76]	@ (800452c <MX_ETH_Init+0x84>)
 80044de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80044e4:	4b11      	ldr	r3, [pc, #68]	@ (800452c <MX_ETH_Init+0x84>)
 80044e6:	4a14      	ldr	r2, [pc, #80]	@ (8004538 <MX_ETH_Init+0x90>)
 80044e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <MX_ETH_Init+0x84>)
 80044ec:	4a13      	ldr	r2, [pc, #76]	@ (800453c <MX_ETH_Init+0x94>)
 80044ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80044f0:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <MX_ETH_Init+0x84>)
 80044f2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80044f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80044f8:	480c      	ldr	r0, [pc, #48]	@ (800452c <MX_ETH_Init+0x84>)
 80044fa:	f7fc fa3d 	bl	8000978 <HAL_ETH_Init>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8004504:	f000 fb72 	bl	8004bec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004508:	2238      	movs	r2, #56	@ 0x38
 800450a:	2100      	movs	r1, #0
 800450c:	480c      	ldr	r0, [pc, #48]	@ (8004540 <MX_ETH_Init+0x98>)
 800450e:	f000 fe3d 	bl	800518c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <MX_ETH_Init+0x98>)
 8004514:	2221      	movs	r2, #33	@ 0x21
 8004516:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004518:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <MX_ETH_Init+0x98>)
 800451a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800451e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004520:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <MX_ETH_Init+0x98>)
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200001f4 	.word	0x200001f4
 8004530:	40028000 	.word	0x40028000
 8004534:	200002a4 	.word	0x200002a4
 8004538:	200000fc 	.word	0x200000fc
 800453c:	2000005c 	.word	0x2000005c
 8004540:	200001bc 	.word	0x200001bc

08004544 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	@ 0x38
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800454c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a4e      	ldr	r2, [pc, #312]	@ (800469c <HAL_ETH_MspInit+0x158>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f040 8096 	bne.w	8004694 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004568:	4b4d      	ldr	r3, [pc, #308]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	4a4c      	ldr	r2, [pc, #304]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 800456e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004572:	6313      	str	r3, [r2, #48]	@ 0x30
 8004574:	4b4a      	ldr	r3, [pc, #296]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	4b47      	ldr	r3, [pc, #284]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	4a46      	ldr	r2, [pc, #280]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 8004586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800458a:	6313      	str	r3, [r2, #48]	@ 0x30
 800458c:	4b44      	ldr	r3, [pc, #272]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4b41      	ldr	r3, [pc, #260]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	4a40      	ldr	r2, [pc, #256]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 800459e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80045a4:	4b3e      	ldr	r3, [pc, #248]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045b0:	4b3b      	ldr	r3, [pc, #236]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	4a3a      	ldr	r2, [pc, #232]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80045bc:	4b38      	ldr	r3, [pc, #224]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c8:	4b35      	ldr	r3, [pc, #212]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	4a34      	ldr	r2, [pc, #208]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d4:	4b32      	ldr	r3, [pc, #200]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e0:	4b2f      	ldr	r3, [pc, #188]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	4a2e      	ldr	r2, [pc, #184]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045e6:	f043 0302 	orr.w	r3, r3, #2
 80045ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ec:	4b2c      	ldr	r3, [pc, #176]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80045f8:	4b29      	ldr	r3, [pc, #164]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	4a28      	ldr	r2, [pc, #160]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 80045fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004602:	6313      	str	r3, [r2, #48]	@ 0x30
 8004604:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <HAL_ETH_MspInit+0x15c>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004610:	2332      	movs	r3, #50	@ 0x32
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461c:	2303      	movs	r3, #3
 800461e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004620:	230b      	movs	r3, #11
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004628:	4619      	mov	r1, r3
 800462a:	481e      	ldr	r0, [pc, #120]	@ (80046a4 <HAL_ETH_MspInit+0x160>)
 800462c:	f7fc fd0a 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004630:	2386      	movs	r3, #134	@ 0x86
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004634:	2302      	movs	r3, #2
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463c:	2303      	movs	r3, #3
 800463e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004640:	230b      	movs	r3, #11
 8004642:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004648:	4619      	mov	r1, r3
 800464a:	4817      	ldr	r0, [pc, #92]	@ (80046a8 <HAL_ETH_MspInit+0x164>)
 800464c:	f7fc fcfa 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004656:	2302      	movs	r3, #2
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465e:	2303      	movs	r3, #3
 8004660:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004662:	230b      	movs	r3, #11
 8004664:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800466a:	4619      	mov	r1, r3
 800466c:	480f      	ldr	r0, [pc, #60]	@ (80046ac <HAL_ETH_MspInit+0x168>)
 800466e:	f7fc fce9 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004672:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004678:	2302      	movs	r3, #2
 800467a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004680:	2303      	movs	r3, #3
 8004682:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004684:	230b      	movs	r3, #11
 8004686:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800468c:	4619      	mov	r1, r3
 800468e:	4808      	ldr	r0, [pc, #32]	@ (80046b0 <HAL_ETH_MspInit+0x16c>)
 8004690:	f7fc fcd8 	bl	8001044 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004694:	bf00      	nop
 8004696:	3738      	adds	r7, #56	@ 0x38
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40028000 	.word	0x40028000
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40020800 	.word	0x40020800
 80046a8:	40020000 	.word	0x40020000
 80046ac:	40020400 	.word	0x40020400
 80046b0:	40021800 	.word	0x40021800

080046b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	@ 0x30
 80046b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ba:	f107 031c 	add.w	r3, r7, #28
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	605a      	str	r2, [r3, #4]
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	60da      	str	r2, [r3, #12]
 80046c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ca:	4b47      	ldr	r3, [pc, #284]	@ (80047e8 <MX_GPIO_Init+0x134>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	4a46      	ldr	r2, [pc, #280]	@ (80047e8 <MX_GPIO_Init+0x134>)
 80046d0:	f043 0304 	orr.w	r3, r3, #4
 80046d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046d6:	4b44      	ldr	r3, [pc, #272]	@ (80047e8 <MX_GPIO_Init+0x134>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046e2:	4b41      	ldr	r3, [pc, #260]	@ (80047e8 <MX_GPIO_Init+0x134>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	4a40      	ldr	r2, [pc, #256]	@ (80047e8 <MX_GPIO_Init+0x134>)
 80046e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ee:	4b3e      	ldr	r3, [pc, #248]	@ (80047e8 <MX_GPIO_Init+0x134>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fa:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <MX_GPIO_Init+0x134>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	4a3a      	ldr	r2, [pc, #232]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6313      	str	r3, [r2, #48]	@ 0x30
 8004706:	4b38      	ldr	r3, [pc, #224]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004712:	4b35      	ldr	r3, [pc, #212]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	4a34      	ldr	r2, [pc, #208]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004718:	f043 0302 	orr.w	r3, r3, #2
 800471c:	6313      	str	r3, [r2, #48]	@ 0x30
 800471e:	4b32      	ldr	r3, [pc, #200]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <MX_GPIO_Init+0x134>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	4a2e      	ldr	r2, [pc, #184]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004730:	f043 0308 	orr.w	r3, r3, #8
 8004734:	6313      	str	r3, [r2, #48]	@ 0x30
 8004736:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004742:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	4a28      	ldr	r2, [pc, #160]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474c:	6313      	str	r3, [r2, #48]	@ 0x30
 800474e:	4b26      	ldr	r3, [pc, #152]	@ (80047e8 <MX_GPIO_Init+0x134>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800475a:	2200      	movs	r2, #0
 800475c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8004760:	4822      	ldr	r0, [pc, #136]	@ (80047ec <MX_GPIO_Init+0x138>)
 8004762:	f7fc fe1b 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004766:	2200      	movs	r2, #0
 8004768:	2140      	movs	r1, #64	@ 0x40
 800476a:	4821      	ldr	r0, [pc, #132]	@ (80047f0 <MX_GPIO_Init+0x13c>)
 800476c:	f7fc fe16 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004776:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800477a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004780:	f107 031c 	add.w	r3, r7, #28
 8004784:	4619      	mov	r1, r3
 8004786:	481b      	ldr	r0, [pc, #108]	@ (80047f4 <MX_GPIO_Init+0x140>)
 8004788:	f7fc fc5c 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800478c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8004790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004792:	2301      	movs	r3, #1
 8004794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479a:	2300      	movs	r3, #0
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479e:	f107 031c 	add.w	r3, r7, #28
 80047a2:	4619      	mov	r1, r3
 80047a4:	4811      	ldr	r0, [pc, #68]	@ (80047ec <MX_GPIO_Init+0x138>)
 80047a6:	f7fc fc4d 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80047aa:	2340      	movs	r3, #64	@ 0x40
 80047ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ae:	2301      	movs	r3, #1
 80047b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b6:	2300      	movs	r3, #0
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80047ba:	f107 031c 	add.w	r3, r7, #28
 80047be:	4619      	mov	r1, r3
 80047c0:	480b      	ldr	r0, [pc, #44]	@ (80047f0 <MX_GPIO_Init+0x13c>)
 80047c2:	f7fc fc3f 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80047c6:	2380      	movs	r3, #128	@ 0x80
 80047c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80047d2:	f107 031c 	add.w	r3, r7, #28
 80047d6:	4619      	mov	r1, r3
 80047d8:	4805      	ldr	r0, [pc, #20]	@ (80047f0 <MX_GPIO_Init+0x13c>)
 80047da:	f7fc fc33 	bl	8001044 <HAL_GPIO_Init>

}
 80047de:	bf00      	nop
 80047e0:	3730      	adds	r7, #48	@ 0x30
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40020400 	.word	0x40020400
 80047f0:	40021800 	.word	0x40021800
 80047f4:	40020800 	.word	0x40020800

080047f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <MX_I2C1_Init+0x74>)
 80047fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <MX_I2C1_Init+0x78>)
 8004800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8004802:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <MX_I2C1_Init+0x74>)
 8004804:	4a1b      	ldr	r2, [pc, #108]	@ (8004874 <MX_I2C1_Init+0x7c>)
 8004806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <MX_I2C1_Init+0x74>)
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <MX_I2C1_Init+0x74>)
 8004810:	2201      	movs	r2, #1
 8004812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004814:	4b15      	ldr	r3, [pc, #84]	@ (800486c <MX_I2C1_Init+0x74>)
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800481a:	4b14      	ldr	r3, [pc, #80]	@ (800486c <MX_I2C1_Init+0x74>)
 800481c:	2200      	movs	r2, #0
 800481e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004820:	4b12      	ldr	r3, [pc, #72]	@ (800486c <MX_I2C1_Init+0x74>)
 8004822:	2200      	movs	r2, #0
 8004824:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004826:	4b11      	ldr	r3, [pc, #68]	@ (800486c <MX_I2C1_Init+0x74>)
 8004828:	2200      	movs	r2, #0
 800482a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800482c:	4b0f      	ldr	r3, [pc, #60]	@ (800486c <MX_I2C1_Init+0x74>)
 800482e:	2200      	movs	r2, #0
 8004830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004832:	480e      	ldr	r0, [pc, #56]	@ (800486c <MX_I2C1_Init+0x74>)
 8004834:	f7fc fde6 	bl	8001404 <HAL_I2C_Init>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800483e:	f000 f9d5 	bl	8004bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004842:	2100      	movs	r1, #0
 8004844:	4809      	ldr	r0, [pc, #36]	@ (800486c <MX_I2C1_Init+0x74>)
 8004846:	f7fc fe79 	bl	800153c <HAL_I2CEx_ConfigAnalogFilter>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004850:	f000 f9cc 	bl	8004bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004854:	2100      	movs	r1, #0
 8004856:	4805      	ldr	r0, [pc, #20]	@ (800486c <MX_I2C1_Init+0x74>)
 8004858:	f7fc febb 	bl	80015d2 <HAL_I2CEx_ConfigDigitalFilter>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004862:	f000 f9c3 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	200002ac 	.word	0x200002ac
 8004870:	40005400 	.word	0x40005400
 8004874:	00808cd2 	.word	0x00808cd2

08004878 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b0aa      	sub	sp, #168	@ 0xa8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004880:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004890:	f107 0310 	add.w	r3, r7, #16
 8004894:	2284      	movs	r2, #132	@ 0x84
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fc77 	bl	800518c <memset>
  if(i2cHandle->Instance==I2C1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a22      	ldr	r2, [pc, #136]	@ (800492c <HAL_I2C_MspInit+0xb4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d13c      	bne.n	8004922 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80048a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80048ae:	2300      	movs	r3, #0
 80048b0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048b2:	f107 0310 	add.w	r3, r7, #16
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd fd36 	bl	8002328 <HAL_RCCEx_PeriphCLKConfig>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80048c2:	f000 f993 	bl	8004bec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <HAL_I2C_MspInit+0xb8>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	4a19      	ldr	r2, [pc, #100]	@ (8004930 <HAL_I2C_MspInit+0xb8>)
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d2:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <HAL_I2C_MspInit+0xb8>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80048e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048e6:	2312      	movs	r3, #18
 80048e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f2:	2303      	movs	r3, #3
 80048f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048f8:	2304      	movs	r3, #4
 80048fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004902:	4619      	mov	r1, r3
 8004904:	480b      	ldr	r0, [pc, #44]	@ (8004934 <HAL_I2C_MspInit+0xbc>)
 8004906:	f7fc fb9d 	bl	8001044 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_I2C_MspInit+0xb8>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	4a08      	ldr	r2, [pc, #32]	@ (8004930 <HAL_I2C_MspInit+0xb8>)
 8004910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004914:	6413      	str	r3, [r2, #64]	@ 0x40
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_I2C_MspInit+0xb8>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004922:	bf00      	nop
 8004924:	37a8      	adds	r7, #168	@ 0xa8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40005400 	.word	0x40005400
 8004930:	40023800 	.word	0x40023800
 8004934:	40020400 	.word	0x40020400

08004938 <main>:
  * @retval int
  */
void SetCalendarAlarm(void);
void Enter_StopMode(void);
int main(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800493e:	f7fb fe37 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004942:	f000 f849 	bl	80049d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004946:	f7ff feb5 	bl	80046b4 <MX_GPIO_Init>
  MX_ETH_Init();
 800494a:	f7ff fdad 	bl	80044a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800494e:	f000 fa9b 	bl	8004e88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004952:	f000 fb29 	bl	8004fa8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8004956:	f7ff ff4f 	bl	80047f8 <MX_I2C1_Init>
  MX_RTC_Init();
 800495a:	f000 f94d 	bl	8004bf8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
	RTC_TimeTypeDef currentTime;
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	2200      	movs	r2, #0
 8004962:	4619      	mov	r1, r3
 8004964:	4817      	ldr	r0, [pc, #92]	@ (80049c4 <main+0x8c>)
 8004966:	f7fe f9ed 	bl	8002d44 <HAL_RTC_GetTime>
	sprintf(kuts,"I've wake up biacz %d:%d:%d\n\r",currentTime.Hours,currentTime.Minutes,currentTime.Seconds);
 800496a:	793b      	ldrb	r3, [r7, #4]
 800496c:	461a      	mov	r2, r3
 800496e:	797b      	ldrb	r3, [r7, #5]
 8004970:	4619      	mov	r1, r3
 8004972:	79bb      	ldrb	r3, [r7, #6]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	460b      	mov	r3, r1
 8004978:	4913      	ldr	r1, [pc, #76]	@ (80049c8 <main+0x90>)
 800497a:	4814      	ldr	r0, [pc, #80]	@ (80049cc <main+0x94>)
 800497c:	f000 fbe6 	bl	800514c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)kuts, strlen(kuts), 1000);
 8004980:	4812      	ldr	r0, [pc, #72]	@ (80049cc <main+0x94>)
 8004982:	f7fb fc45 	bl	8000210 <strlen>
 8004986:	4603      	mov	r3, r0
 8004988:	b29a      	uxth	r2, r3
 800498a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800498e:	490f      	ldr	r1, [pc, #60]	@ (80049cc <main+0x94>)
 8004990:	480f      	ldr	r0, [pc, #60]	@ (80049d0 <main+0x98>)
 8004992:	f7fe fde1 	bl	8003558 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8004996:	2101      	movs	r1, #1
 8004998:	480e      	ldr	r0, [pc, #56]	@ (80049d4 <main+0x9c>)
 800499a:	f7fc fd18 	bl	80013ce <HAL_GPIO_TogglePin>
	  Enter_StopMode();
 800499e:	f000 f885 	bl	8004aac <Enter_StopMode>
	  HAL_UART_Transmit(&huart3, (uint8_t*)kuts, strlen(kuts), 1000);
 80049a2:	480a      	ldr	r0, [pc, #40]	@ (80049cc <main+0x94>)
 80049a4:	f7fb fc34 	bl	8000210 <strlen>
 80049a8:	4603      	mov	r3, r0
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049b0:	4906      	ldr	r1, [pc, #24]	@ (80049cc <main+0x94>)
 80049b2:	4807      	ldr	r0, [pc, #28]	@ (80049d0 <main+0x98>)
 80049b4:	f7fe fdd0 	bl	8003558 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80049b8:	2180      	movs	r1, #128	@ 0x80
 80049ba:	4806      	ldr	r0, [pc, #24]	@ (80049d4 <main+0x9c>)
 80049bc:	f7fc fd07 	bl	80013ce <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80049c0:	bf00      	nop
 80049c2:	e7e8      	b.n	8004996 <main+0x5e>
 80049c4:	20000334 	.word	0x20000334
 80049c8:	08005aa4 	.word	0x08005aa4
 80049cc:	20000300 	.word	0x20000300
 80049d0:	20000358 	.word	0x20000358
 80049d4:	40020400 	.word	0x40020400

080049d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b094      	sub	sp, #80	@ 0x50
 80049dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049de:	f107 0320 	add.w	r3, r7, #32
 80049e2:	2230      	movs	r2, #48	@ 0x30
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fbd0 	bl	800518c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049ec:	f107 030c 	add.w	r3, r7, #12
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80049fc:	f7fc ff70 	bl	80018e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a00:	4b28      	ldr	r3, [pc, #160]	@ (8004aa4 <SystemClock_Config+0xcc>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	4a27      	ldr	r2, [pc, #156]	@ (8004aa4 <SystemClock_Config+0xcc>)
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a0c:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <SystemClock_Config+0xcc>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004a18:	4b23      	ldr	r3, [pc, #140]	@ (8004aa8 <SystemClock_Config+0xd0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004a20:	4a21      	ldr	r2, [pc, #132]	@ (8004aa8 <SystemClock_Config+0xd0>)
 8004a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa8 <SystemClock_Config+0xd0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004a34:	2309      	movs	r3, #9
 8004a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004a38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a42:	2302      	movs	r3, #2
 8004a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004a50:	2348      	movs	r3, #72	@ 0x48
 8004a52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a54:	2302      	movs	r3, #2
 8004a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a5c:	f107 0320 	add.w	r3, r7, #32
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc ff97 	bl	8001994 <HAL_RCC_OscConfig>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004a6c:	f000 f8be 	bl	8004bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a70:	230f      	movs	r3, #15
 8004a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a74:	2302      	movs	r3, #2
 8004a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a86:	f107 030c 	add.w	r3, r7, #12
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fa25 	bl	8001edc <HAL_RCC_ClockConfig>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004a98:	f000 f8a8 	bl	8004bec <Error_Handler>
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3750      	adds	r7, #80	@ 0x50
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40007000 	.word	0x40007000

08004aac <Enter_StopMode>:

/* USER CODE BEGIN 4 */
void Enter_StopMode(void)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0


	EXTI_HandleTypeDef ee = {.Line = EXTI_LINE_17,.PendingCallback = NULL};
 8004ab2:	4b28      	ldr	r3, [pc, #160]	@ (8004b54 <Enter_StopMode+0xa8>)
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
	HAL_EXTI_ClearPending(&ee,EXTI_TRIGGER_RISING);
 8004aba:	1d3b      	adds	r3, r7, #4
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc faa8 	bl	8001014 <HAL_EXTI_ClearPending>
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc,RTC_FLAG_ALRAF);
 8004ac4:	4b24      	ldr	r3, [pc, #144]	@ (8004b58 <Enter_StopMode+0xac>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	4b22      	ldr	r3, [pc, #136]	@ (8004b58 <Enter_StopMode+0xac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004ad4:	60da      	str	r2, [r3, #12]
	HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);
 8004ad6:	2029      	movs	r0, #41	@ 0x29
 8004ad8:	f7fb ff40 	bl	800095c <HAL_NVIC_ClearPendingIRQ>

	__HAL_GPIO_EXTI_CLEAR_IT(USER_Btn_Pin);
 8004adc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b5c <Enter_StopMode+0xb0>)
 8004ade:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ae2:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004ae4:	2028      	movs	r0, #40	@ 0x28
 8004ae6:	f7fb ff39 	bl	800095c <HAL_NVIC_ClearPendingIRQ>

	HAL_PWR_EnableSEVOnPend();
 8004aea:	f7fc ff43 	bl	8001974 <HAL_PWR_EnableSEVOnPend>
	SetCalendarAlarm();
 8004aee:	f000 f83f 	bl	8004b70 <SetCalendarAlarm>
	HAL_SuspendTick();
 8004af2:	f7fb fddf 	bl	80006b4 <HAL_SuspendTick>
	memcpy(kuts,"",sizeof(kuts));
 8004af6:	2232      	movs	r2, #50	@ 0x32
 8004af8:	4919      	ldr	r1, [pc, #100]	@ (8004b60 <Enter_StopMode+0xb4>)
 8004afa:	481a      	ldr	r0, [pc, #104]	@ (8004b64 <Enter_StopMode+0xb8>)
 8004afc:	f000 fb7a 	bl	80051f4 <memcpy>

	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_UNDERDRIVE_ON, PWR_STOPENTRY_WFE);
 8004b00:	2102      	movs	r1, #2
 8004b02:	f240 4001 	movw	r0, #1025	@ 0x401
 8004b06:	f7fc fefb 	bl	8001900 <HAL_PWR_EnterSTOPMode>

	uint32_t e = HAL_NVIC_GetPendingIRQ(RTC_Alarm_IRQn) > HAL_NVIC_GetPendingIRQ(EXTI15_10_IRQn) ? 0x69 :0x70;
 8004b0a:	2029      	movs	r0, #41	@ 0x29
 8004b0c:	f7fb ff17 	bl	800093e <HAL_NVIC_GetPendingIRQ>
 8004b10:	4604      	mov	r4, r0
 8004b12:	2028      	movs	r0, #40	@ 0x28
 8004b14:	f7fb ff13 	bl	800093e <HAL_NVIC_GetPendingIRQ>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	429c      	cmp	r4, r3
 8004b1c:	d901      	bls.n	8004b22 <Enter_StopMode+0x76>
 8004b1e:	2369      	movs	r3, #105	@ 0x69
 8004b20:	e000      	b.n	8004b24 <Enter_StopMode+0x78>
 8004b22:	2370      	movs	r3, #112	@ 0x70
 8004b24:	60fb      	str	r3, [r7, #12]

	if(e == 0x69){
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b69      	cmp	r3, #105	@ 0x69
 8004b2a:	d104      	bne.n	8004b36 <Enter_StopMode+0x8a>

		sprintf(kuts,"Waked from alarm\n\r");
 8004b2c:	490e      	ldr	r1, [pc, #56]	@ (8004b68 <Enter_StopMode+0xbc>)
 8004b2e:	480d      	ldr	r0, [pc, #52]	@ (8004b64 <Enter_StopMode+0xb8>)
 8004b30:	f000 fb0c 	bl	800514c <siprintf>
 8004b34:	e006      	b.n	8004b44 <Enter_StopMode+0x98>
	}
	else if(e==0x70){
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b70      	cmp	r3, #112	@ 0x70
 8004b3a:	d103      	bne.n	8004b44 <Enter_StopMode+0x98>

		sprintf(kuts,"Waked from button\n\r");
 8004b3c:	490b      	ldr	r1, [pc, #44]	@ (8004b6c <Enter_StopMode+0xc0>)
 8004b3e:	4809      	ldr	r0, [pc, #36]	@ (8004b64 <Enter_StopMode+0xb8>)
 8004b40:	f000 fb04 	bl	800514c <siprintf>
	}

	HAL_ResumeTick();
 8004b44:	f7fb fdc6 	bl	80006d4 <HAL_ResumeTick>




	SystemClock_Config();
 8004b48:	f7ff ff46 	bl	80049d8 <SystemClock_Config>
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd90      	pop	{r4, r7, pc}
 8004b54:	02000011 	.word	0x02000011
 8004b58:	20000334 	.word	0x20000334
 8004b5c:	40013c00 	.word	0x40013c00
 8004b60:	08005ac4 	.word	0x08005ac4
 8004b64:	20000300 	.word	0x20000300
 8004b68:	08005ac8 	.word	0x08005ac8
 8004b6c:	08005adc 	.word	0x08005adc

08004b70 <SetCalendarAlarm>:


void SetCalendarAlarm(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b090      	sub	sp, #64	@ 0x40
 8004b74:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef currentTime;
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8004b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	481a      	ldr	r0, [pc, #104]	@ (8004be8 <SetCalendarAlarm+0x78>)
 8004b80:	f7fe f8e0 	bl	8002d44 <HAL_RTC_GetTime>
	RTC_AlarmTypeDef sAlarm = {0};
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	2228      	movs	r2, #40	@ 0x28
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fafe 	bl	800518c <memset>
	RTC_DateTypeDef currentDate;
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8004b90:	463b      	mov	r3, r7
 8004b92:	2200      	movs	r2, #0
 8004b94:	4619      	mov	r1, r3
 8004b96:	4814      	ldr	r0, [pc, #80]	@ (8004be8 <SetCalendarAlarm+0x78>)
 8004b98:	f7fe f9b6 	bl	8002f08 <HAL_RTC_GetDate>
	sAlarm.AlarmTime.Hours = 0x0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = currentTime.Minutes+10;
 8004ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004ba4:	330a      	adds	r3, #10
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = currentDate.Date;
 8004bc6:	78bb      	ldrb	r3, [r7, #2]
 8004bc8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8004bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm,RTC_FORMAT_BIN);
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4803      	ldr	r0, [pc, #12]	@ (8004be8 <SetCalendarAlarm+0x78>)
 8004bda:	f7fe f9e5 	bl	8002fa8 <HAL_RTC_SetAlarm_IT>

}
 8004bde:	bf00      	nop
 8004be0:	3740      	adds	r7, #64	@ 0x40
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000334 	.word	0x20000334

08004bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf0:	b672      	cpsid	i
}
 8004bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <Error_Handler+0x8>

08004bf8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b090      	sub	sp, #64	@ 0x40
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004c12:	463b      	mov	r3, r7
 8004c14:	2228      	movs	r2, #40	@ 0x28
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fab7 	bl	800518c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004c1e:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c20:	4a29      	ldr	r2, [pc, #164]	@ (8004cc8 <MX_RTC_Init+0xd0>)
 8004c22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004c24:	4b27      	ldr	r3, [pc, #156]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004c2a:	4b26      	ldr	r3, [pc, #152]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c2c:	227f      	movs	r2, #127	@ 0x7f
 8004c2e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004c30:	4b24      	ldr	r3, [pc, #144]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c32:	22ff      	movs	r2, #255	@ 0xff
 8004c34:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004c36:	4b23      	ldr	r3, [pc, #140]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004c3c:	4b21      	ldr	r3, [pc, #132]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004c42:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004c48:	481e      	ldr	r0, [pc, #120]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c4a:	f7fd ff5d 	bl	8002b08 <HAL_RTC_Init>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004c54:	f7ff ffca 	bl	8004bec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004c72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c76:	2201      	movs	r2, #1
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4812      	ldr	r0, [pc, #72]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004c7c:	f7fd ffc8 	bl	8002c10 <HAL_RTC_SetTime>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004c86:	f7ff ffb1 	bl	8004bec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4806      	ldr	r0, [pc, #24]	@ (8004cc4 <MX_RTC_Init+0xcc>)
 8004cac:	f7fe f8a8 	bl	8002e00 <HAL_RTC_SetDate>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004cb6:	f7ff ff99 	bl	8004bec <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004cba:	bf00      	nop
 8004cbc:	3740      	adds	r7, #64	@ 0x40
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000334 	.word	0x20000334
 8004cc8:	40002800 	.word	0x40002800

08004ccc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b0a4      	sub	sp, #144	@ 0x90
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cd4:	f107 030c 	add.w	r3, r7, #12
 8004cd8:	2284      	movs	r2, #132	@ 0x84
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fa55 	bl	800518c <memset>
  if(rtcHandle->Instance==RTC)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d20 <HAL_RTC_MspInit+0x54>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d114      	bne.n	8004d16 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004cec:	2320      	movs	r3, #32
 8004cee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cf6:	f107 030c 	add.w	r3, r7, #12
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fd fb14 	bl	8002328 <HAL_RCCEx_PeriphCLKConfig>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004d06:	f7ff ff71 	bl	8004bec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RTC_MspInit+0x58>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	4a05      	ldr	r2, [pc, #20]	@ (8004d24 <HAL_RTC_MspInit+0x58>)
 8004d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d14:	6713      	str	r3, [r2, #112]	@ 0x70
  	*/
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004d16:	bf00      	nop
 8004d18:	3790      	adds	r7, #144	@ 0x90
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40002800 	.word	0x40002800
 8004d24:	40023800 	.word	0x40023800

08004d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d6c <HAL_MspInit+0x44>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	4a0e      	ldr	r2, [pc, #56]	@ (8004d6c <HAL_MspInit+0x44>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_MspInit+0x44>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d46:	4b09      	ldr	r3, [pc, #36]	@ (8004d6c <HAL_MspInit+0x44>)
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <HAL_MspInit+0x44>)
 8004d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_MspInit+0x44>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <NMI_Handler+0x4>

08004d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <HardFault_Handler+0x4>

08004d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <MemManage_Handler+0x4>

08004d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <BusFault_Handler+0x4>

08004d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <UsageFault_Handler+0x4>

08004d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da6:	b480      	push	{r7}
 8004da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dc6:	f7fb fc31 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004dd4:	4802      	ldr	r0, [pc, #8]	@ (8004de0 <RTC_WKUP_IRQHandler+0x10>)
 8004dd6:	f7fe fb39 	bl	800344c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000334 	.word	0x20000334

08004de4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004de8:	4802      	ldr	r0, [pc, #8]	@ (8004df4 <RTC_Alarm_IRQHandler+0x10>)
 8004dea:	f7fe fa21 	bl	8003230 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000334 	.word	0x20000334

08004df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e00:	4a14      	ldr	r2, [pc, #80]	@ (8004e54 <_sbrk+0x5c>)
 8004e02:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <_sbrk+0x60>)
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e0c:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <_sbrk+0x64>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e14:	4b11      	ldr	r3, [pc, #68]	@ (8004e5c <_sbrk+0x64>)
 8004e16:	4a12      	ldr	r2, [pc, #72]	@ (8004e60 <_sbrk+0x68>)
 8004e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e1a:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <_sbrk+0x64>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d207      	bcs.n	8004e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e28:	f000 f9b8 	bl	800519c <__errno>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	220c      	movs	r2, #12
 8004e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295
 8004e36:	e009      	b.n	8004e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e38:	4b08      	ldr	r3, [pc, #32]	@ (8004e5c <_sbrk+0x64>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e3e:	4b07      	ldr	r3, [pc, #28]	@ (8004e5c <_sbrk+0x64>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4413      	add	r3, r2
 8004e46:	4a05      	ldr	r2, [pc, #20]	@ (8004e5c <_sbrk+0x64>)
 8004e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20050000 	.word	0x20050000
 8004e58:	00000400 	.word	0x00000400
 8004e5c:	20000354 	.word	0x20000354
 8004e60:	20000a08 	.word	0x20000a08

08004e64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <SystemInit+0x20>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6e:	4a05      	ldr	r2, [pc, #20]	@ (8004e84 <SystemInit+0x20>)
 8004e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004e8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ee4 <MX_USART3_UART_Init+0x5c>)
 8004e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e92:	4b13      	ldr	r3, [pc, #76]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e9a:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004eae:	220c      	movs	r2, #12
 8004eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ebe:	4b08      	ldr	r3, [pc, #32]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004eca:	4805      	ldr	r0, [pc, #20]	@ (8004ee0 <MX_USART3_UART_Init+0x58>)
 8004ecc:	f7fe faf6 	bl	80034bc <HAL_UART_Init>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004ed6:	f7ff fe89 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000358 	.word	0x20000358
 8004ee4:	40004800 	.word	0x40004800

08004ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b0aa      	sub	sp, #168	@ 0xa8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f00:	f107 0310 	add.w	r3, r7, #16
 8004f04:	2284      	movs	r2, #132	@ 0x84
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f93f 	bl	800518c <memset>
  if(uartHandle->Instance==USART3)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a22      	ldr	r2, [pc, #136]	@ (8004f9c <HAL_UART_MspInit+0xb4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d13c      	bne.n	8004f92 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f22:	f107 0310 	add.w	r3, r7, #16
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd f9fe 	bl	8002328 <HAL_RCCEx_PeriphCLKConfig>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004f32:	f7ff fe5b 	bl	8004bec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f36:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <HAL_UART_MspInit+0xb8>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	4a19      	ldr	r2, [pc, #100]	@ (8004fa0 <HAL_UART_MspInit+0xb8>)
 8004f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f42:	4b17      	ldr	r3, [pc, #92]	@ (8004fa0 <HAL_UART_MspInit+0xb8>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f4e:	4b14      	ldr	r3, [pc, #80]	@ (8004fa0 <HAL_UART_MspInit+0xb8>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	4a13      	ldr	r2, [pc, #76]	@ (8004fa0 <HAL_UART_MspInit+0xb8>)
 8004f54:	f043 0308 	orr.w	r3, r3, #8
 8004f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f5a:	4b11      	ldr	r3, [pc, #68]	@ (8004fa0 <HAL_UART_MspInit+0xb8>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004f66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f80:	2307      	movs	r3, #7
 8004f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f86:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	@ (8004fa4 <HAL_UART_MspInit+0xbc>)
 8004f8e:	f7fc f859 	bl	8001044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004f92:	bf00      	nop
 8004f94:	37a8      	adds	r7, #168	@ 0xa8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40004800 	.word	0x40004800
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40020c00 	.word	0x40020c00

08004fa8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004fac:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004fb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004fb4:	4b12      	ldr	r3, [pc, #72]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fb6:	2206      	movs	r2, #6
 8004fb8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004fba:	4b11      	ldr	r3, [pc, #68]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fc8:	2202      	movs	r2, #2
 8004fca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004fd8:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004fde:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004fea:	4805      	ldr	r0, [pc, #20]	@ (8005000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004fec:	f7fc fb3d 	bl	800166a <HAL_PCD_Init>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004ff6:	f7ff fdf9 	bl	8004bec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200003e0 	.word	0x200003e0

08005004 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b0ac      	sub	sp, #176	@ 0xb0
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800501c:	f107 0318 	add.w	r3, r7, #24
 8005020:	2284      	movs	r2, #132	@ 0x84
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f8b1 	bl	800518c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005032:	d159      	bne.n	80050e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8005034:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005038:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005040:	f107 0318 	add.w	r3, r7, #24
 8005044:	4618      	mov	r0, r3
 8005046:	f7fd f96f 	bl	8002328 <HAL_RCCEx_PeriphCLKConfig>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8005050:	f7ff fdcc 	bl	8004bec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005054:	4b26      	ldr	r3, [pc, #152]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	4a25      	ldr	r2, [pc, #148]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005060:	4b23      	ldr	r3, [pc, #140]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800506c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8005070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005074:	2302      	movs	r3, #2
 8005076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005080:	2303      	movs	r3, #3
 8005082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005086:	230a      	movs	r3, #10
 8005088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800508c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005090:	4619      	mov	r1, r3
 8005092:	4818      	ldr	r0, [pc, #96]	@ (80050f4 <HAL_PCD_MspInit+0xf0>)
 8005094:	f7fb ffd6 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800509c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80050ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80050b0:	4619      	mov	r1, r3
 80050b2:	4810      	ldr	r0, [pc, #64]	@ (80050f4 <HAL_PCD_MspInit+0xf0>)
 80050b4:	f7fb ffc6 	bl	8001044 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80050b8:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 80050ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050bc:	4a0c      	ldr	r2, [pc, #48]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 80050be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 80050c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 80050d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d4:	4a06      	ldr	r2, [pc, #24]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 80050d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050da:	6453      	str	r3, [r2, #68]	@ 0x44
 80050dc:	4b04      	ldr	r3, [pc, #16]	@ (80050f0 <HAL_PCD_MspInit+0xec>)
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80050e8:	bf00      	nop
 80050ea:	37b0      	adds	r7, #176	@ 0xb0
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40020000 	.word	0x40020000

080050f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80050f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005130 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80050fc:	f7ff feb2 	bl	8004e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005100:	480c      	ldr	r0, [pc, #48]	@ (8005134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005102:	490d      	ldr	r1, [pc, #52]	@ (8005138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005104:	4a0d      	ldr	r2, [pc, #52]	@ (800513c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005108:	e002      	b.n	8005110 <LoopCopyDataInit>

0800510a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800510a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800510c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800510e:	3304      	adds	r3, #4

08005110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005114:	d3f9      	bcc.n	800510a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005116:	4a0a      	ldr	r2, [pc, #40]	@ (8005140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005118:	4c0a      	ldr	r4, [pc, #40]	@ (8005144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800511a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800511c:	e001      	b.n	8005122 <LoopFillZerobss>

0800511e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800511e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005120:	3204      	adds	r2, #4

08005122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005124:	d3fb      	bcc.n	800511e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8005126:	f000 f83f 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800512a:	f7ff fc05 	bl	8004938 <main>
  bx  lr    
 800512e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005130:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005138:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800513c:	08005b4c 	.word	0x08005b4c
  ldr r2, =_sbss
 8005140:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8005144:	20000a08 	.word	0x20000a08

08005148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005148:	e7fe      	b.n	8005148 <ADC_IRQHandler>
	...

0800514c <siprintf>:
 800514c:	b40e      	push	{r1, r2, r3}
 800514e:	b500      	push	{lr}
 8005150:	b09c      	sub	sp, #112	@ 0x70
 8005152:	ab1d      	add	r3, sp, #116	@ 0x74
 8005154:	9002      	str	r0, [sp, #8]
 8005156:	9006      	str	r0, [sp, #24]
 8005158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800515c:	4809      	ldr	r0, [pc, #36]	@ (8005184 <siprintf+0x38>)
 800515e:	9107      	str	r1, [sp, #28]
 8005160:	9104      	str	r1, [sp, #16]
 8005162:	4909      	ldr	r1, [pc, #36]	@ (8005188 <siprintf+0x3c>)
 8005164:	f853 2b04 	ldr.w	r2, [r3], #4
 8005168:	9105      	str	r1, [sp, #20]
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	a902      	add	r1, sp, #8
 8005170:	f000 f9a2 	bl	80054b8 <_svfiprintf_r>
 8005174:	9b02      	ldr	r3, [sp, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	b01c      	add	sp, #112	@ 0x70
 800517c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005180:	b003      	add	sp, #12
 8005182:	4770      	bx	lr
 8005184:	2000000c 	.word	0x2000000c
 8005188:	ffff0208 	.word	0xffff0208

0800518c <memset>:
 800518c:	4402      	add	r2, r0
 800518e:	4603      	mov	r3, r0
 8005190:	4293      	cmp	r3, r2
 8005192:	d100      	bne.n	8005196 <memset+0xa>
 8005194:	4770      	bx	lr
 8005196:	f803 1b01 	strb.w	r1, [r3], #1
 800519a:	e7f9      	b.n	8005190 <memset+0x4>

0800519c <__errno>:
 800519c:	4b01      	ldr	r3, [pc, #4]	@ (80051a4 <__errno+0x8>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	2000000c 	.word	0x2000000c

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	@ (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	@ (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	@ (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	@ (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 fc66 	bl	8005a8c <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	08005b44 	.word	0x08005b44
 80051e4:	08005b44 	.word	0x08005b44
 80051e8:	08005b44 	.word	0x08005b44
 80051ec:	08005b48 	.word	0x08005b48

080051f0 <__retarget_lock_acquire_recursive>:
 80051f0:	4770      	bx	lr

080051f2 <__retarget_lock_release_recursive>:
 80051f2:	4770      	bx	lr

080051f4 <memcpy>:
 80051f4:	440a      	add	r2, r1
 80051f6:	4291      	cmp	r1, r2
 80051f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051fc:	d100      	bne.n	8005200 <memcpy+0xc>
 80051fe:	4770      	bx	lr
 8005200:	b510      	push	{r4, lr}
 8005202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800520a:	4291      	cmp	r1, r2
 800520c:	d1f9      	bne.n	8005202 <memcpy+0xe>
 800520e:	bd10      	pop	{r4, pc}

08005210 <_free_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4605      	mov	r5, r0
 8005214:	2900      	cmp	r1, #0
 8005216:	d041      	beq.n	800529c <_free_r+0x8c>
 8005218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521c:	1f0c      	subs	r4, r1, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfb8      	it	lt
 8005222:	18e4      	addlt	r4, r4, r3
 8005224:	f000 f8e0 	bl	80053e8 <__malloc_lock>
 8005228:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <_free_r+0x90>)
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	b933      	cbnz	r3, 800523c <_free_r+0x2c>
 800522e:	6063      	str	r3, [r4, #4]
 8005230:	6014      	str	r4, [r2, #0]
 8005232:	4628      	mov	r0, r5
 8005234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005238:	f000 b8dc 	b.w	80053f4 <__malloc_unlock>
 800523c:	42a3      	cmp	r3, r4
 800523e:	d908      	bls.n	8005252 <_free_r+0x42>
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	1821      	adds	r1, r4, r0
 8005244:	428b      	cmp	r3, r1
 8005246:	bf01      	itttt	eq
 8005248:	6819      	ldreq	r1, [r3, #0]
 800524a:	685b      	ldreq	r3, [r3, #4]
 800524c:	1809      	addeq	r1, r1, r0
 800524e:	6021      	streq	r1, [r4, #0]
 8005250:	e7ed      	b.n	800522e <_free_r+0x1e>
 8005252:	461a      	mov	r2, r3
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b10b      	cbz	r3, 800525c <_free_r+0x4c>
 8005258:	42a3      	cmp	r3, r4
 800525a:	d9fa      	bls.n	8005252 <_free_r+0x42>
 800525c:	6811      	ldr	r1, [r2, #0]
 800525e:	1850      	adds	r0, r2, r1
 8005260:	42a0      	cmp	r0, r4
 8005262:	d10b      	bne.n	800527c <_free_r+0x6c>
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	4401      	add	r1, r0
 8005268:	1850      	adds	r0, r2, r1
 800526a:	4283      	cmp	r3, r0
 800526c:	6011      	str	r1, [r2, #0]
 800526e:	d1e0      	bne.n	8005232 <_free_r+0x22>
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	6053      	str	r3, [r2, #4]
 8005276:	4408      	add	r0, r1
 8005278:	6010      	str	r0, [r2, #0]
 800527a:	e7da      	b.n	8005232 <_free_r+0x22>
 800527c:	d902      	bls.n	8005284 <_free_r+0x74>
 800527e:	230c      	movs	r3, #12
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	e7d6      	b.n	8005232 <_free_r+0x22>
 8005284:	6820      	ldr	r0, [r4, #0]
 8005286:	1821      	adds	r1, r4, r0
 8005288:	428b      	cmp	r3, r1
 800528a:	bf04      	itt	eq
 800528c:	6819      	ldreq	r1, [r3, #0]
 800528e:	685b      	ldreq	r3, [r3, #4]
 8005290:	6063      	str	r3, [r4, #4]
 8005292:	bf04      	itt	eq
 8005294:	1809      	addeq	r1, r1, r0
 8005296:	6021      	streq	r1, [r4, #0]
 8005298:	6054      	str	r4, [r2, #4]
 800529a:	e7ca      	b.n	8005232 <_free_r+0x22>
 800529c:	bd38      	pop	{r3, r4, r5, pc}
 800529e:	bf00      	nop
 80052a0:	20000a04 	.word	0x20000a04

080052a4 <sbrk_aligned>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4e0f      	ldr	r6, [pc, #60]	@ (80052e4 <sbrk_aligned+0x40>)
 80052a8:	460c      	mov	r4, r1
 80052aa:	6831      	ldr	r1, [r6, #0]
 80052ac:	4605      	mov	r5, r0
 80052ae:	b911      	cbnz	r1, 80052b6 <sbrk_aligned+0x12>
 80052b0:	f000 fba6 	bl	8005a00 <_sbrk_r>
 80052b4:	6030      	str	r0, [r6, #0]
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 fba1 	bl	8005a00 <_sbrk_r>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d103      	bne.n	80052ca <sbrk_aligned+0x26>
 80052c2:	f04f 34ff 	mov.w	r4, #4294967295
 80052c6:	4620      	mov	r0, r4
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
 80052ca:	1cc4      	adds	r4, r0, #3
 80052cc:	f024 0403 	bic.w	r4, r4, #3
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d0f8      	beq.n	80052c6 <sbrk_aligned+0x22>
 80052d4:	1a21      	subs	r1, r4, r0
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fb92 	bl	8005a00 <_sbrk_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d1f2      	bne.n	80052c6 <sbrk_aligned+0x22>
 80052e0:	e7ef      	b.n	80052c2 <sbrk_aligned+0x1e>
 80052e2:	bf00      	nop
 80052e4:	20000a00 	.word	0x20000a00

080052e8 <_malloc_r>:
 80052e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ec:	1ccd      	adds	r5, r1, #3
 80052ee:	f025 0503 	bic.w	r5, r5, #3
 80052f2:	3508      	adds	r5, #8
 80052f4:	2d0c      	cmp	r5, #12
 80052f6:	bf38      	it	cc
 80052f8:	250c      	movcc	r5, #12
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	4606      	mov	r6, r0
 80052fe:	db01      	blt.n	8005304 <_malloc_r+0x1c>
 8005300:	42a9      	cmp	r1, r5
 8005302:	d904      	bls.n	800530e <_malloc_r+0x26>
 8005304:	230c      	movs	r3, #12
 8005306:	6033      	str	r3, [r6, #0]
 8005308:	2000      	movs	r0, #0
 800530a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800530e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053e4 <_malloc_r+0xfc>
 8005312:	f000 f869 	bl	80053e8 <__malloc_lock>
 8005316:	f8d8 3000 	ldr.w	r3, [r8]
 800531a:	461c      	mov	r4, r3
 800531c:	bb44      	cbnz	r4, 8005370 <_malloc_r+0x88>
 800531e:	4629      	mov	r1, r5
 8005320:	4630      	mov	r0, r6
 8005322:	f7ff ffbf 	bl	80052a4 <sbrk_aligned>
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	4604      	mov	r4, r0
 800532a:	d158      	bne.n	80053de <_malloc_r+0xf6>
 800532c:	f8d8 4000 	ldr.w	r4, [r8]
 8005330:	4627      	mov	r7, r4
 8005332:	2f00      	cmp	r7, #0
 8005334:	d143      	bne.n	80053be <_malloc_r+0xd6>
 8005336:	2c00      	cmp	r4, #0
 8005338:	d04b      	beq.n	80053d2 <_malloc_r+0xea>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	4639      	mov	r1, r7
 800533e:	4630      	mov	r0, r6
 8005340:	eb04 0903 	add.w	r9, r4, r3
 8005344:	f000 fb5c 	bl	8005a00 <_sbrk_r>
 8005348:	4581      	cmp	r9, r0
 800534a:	d142      	bne.n	80053d2 <_malloc_r+0xea>
 800534c:	6821      	ldr	r1, [r4, #0]
 800534e:	1a6d      	subs	r5, r5, r1
 8005350:	4629      	mov	r1, r5
 8005352:	4630      	mov	r0, r6
 8005354:	f7ff ffa6 	bl	80052a4 <sbrk_aligned>
 8005358:	3001      	adds	r0, #1
 800535a:	d03a      	beq.n	80053d2 <_malloc_r+0xea>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	442b      	add	r3, r5
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	f8d8 3000 	ldr.w	r3, [r8]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	bb62      	cbnz	r2, 80053c4 <_malloc_r+0xdc>
 800536a:	f8c8 7000 	str.w	r7, [r8]
 800536e:	e00f      	b.n	8005390 <_malloc_r+0xa8>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	1b52      	subs	r2, r2, r5
 8005374:	d420      	bmi.n	80053b8 <_malloc_r+0xd0>
 8005376:	2a0b      	cmp	r2, #11
 8005378:	d917      	bls.n	80053aa <_malloc_r+0xc2>
 800537a:	1961      	adds	r1, r4, r5
 800537c:	42a3      	cmp	r3, r4
 800537e:	6025      	str	r5, [r4, #0]
 8005380:	bf18      	it	ne
 8005382:	6059      	strne	r1, [r3, #4]
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	bf08      	it	eq
 8005388:	f8c8 1000 	streq.w	r1, [r8]
 800538c:	5162      	str	r2, [r4, r5]
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	4630      	mov	r0, r6
 8005392:	f000 f82f 	bl	80053f4 <__malloc_unlock>
 8005396:	f104 000b 	add.w	r0, r4, #11
 800539a:	1d23      	adds	r3, r4, #4
 800539c:	f020 0007 	bic.w	r0, r0, #7
 80053a0:	1ac2      	subs	r2, r0, r3
 80053a2:	bf1c      	itt	ne
 80053a4:	1a1b      	subne	r3, r3, r0
 80053a6:	50a3      	strne	r3, [r4, r2]
 80053a8:	e7af      	b.n	800530a <_malloc_r+0x22>
 80053aa:	6862      	ldr	r2, [r4, #4]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	bf0c      	ite	eq
 80053b0:	f8c8 2000 	streq.w	r2, [r8]
 80053b4:	605a      	strne	r2, [r3, #4]
 80053b6:	e7eb      	b.n	8005390 <_malloc_r+0xa8>
 80053b8:	4623      	mov	r3, r4
 80053ba:	6864      	ldr	r4, [r4, #4]
 80053bc:	e7ae      	b.n	800531c <_malloc_r+0x34>
 80053be:	463c      	mov	r4, r7
 80053c0:	687f      	ldr	r7, [r7, #4]
 80053c2:	e7b6      	b.n	8005332 <_malloc_r+0x4a>
 80053c4:	461a      	mov	r2, r3
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	42a3      	cmp	r3, r4
 80053ca:	d1fb      	bne.n	80053c4 <_malloc_r+0xdc>
 80053cc:	2300      	movs	r3, #0
 80053ce:	6053      	str	r3, [r2, #4]
 80053d0:	e7de      	b.n	8005390 <_malloc_r+0xa8>
 80053d2:	230c      	movs	r3, #12
 80053d4:	6033      	str	r3, [r6, #0]
 80053d6:	4630      	mov	r0, r6
 80053d8:	f000 f80c 	bl	80053f4 <__malloc_unlock>
 80053dc:	e794      	b.n	8005308 <_malloc_r+0x20>
 80053de:	6005      	str	r5, [r0, #0]
 80053e0:	e7d6      	b.n	8005390 <_malloc_r+0xa8>
 80053e2:	bf00      	nop
 80053e4:	20000a04 	.word	0x20000a04

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__malloc_lock+0x8>)
 80053ea:	f7ff bf01 	b.w	80051f0 <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	200009fc 	.word	0x200009fc

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	@ (80053fc <__malloc_unlock+0x8>)
 80053f6:	f7ff befc 	b.w	80051f2 <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	200009fc 	.word	0x200009fc

08005400 <__ssputs_r>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	688e      	ldr	r6, [r1, #8]
 8005406:	461f      	mov	r7, r3
 8005408:	42be      	cmp	r6, r7
 800540a:	680b      	ldr	r3, [r1, #0]
 800540c:	4682      	mov	sl, r0
 800540e:	460c      	mov	r4, r1
 8005410:	4690      	mov	r8, r2
 8005412:	d82d      	bhi.n	8005470 <__ssputs_r+0x70>
 8005414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005418:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800541c:	d026      	beq.n	800546c <__ssputs_r+0x6c>
 800541e:	6965      	ldr	r5, [r4, #20]
 8005420:	6909      	ldr	r1, [r1, #16]
 8005422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005426:	eba3 0901 	sub.w	r9, r3, r1
 800542a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800542e:	1c7b      	adds	r3, r7, #1
 8005430:	444b      	add	r3, r9
 8005432:	106d      	asrs	r5, r5, #1
 8005434:	429d      	cmp	r5, r3
 8005436:	bf38      	it	cc
 8005438:	461d      	movcc	r5, r3
 800543a:	0553      	lsls	r3, r2, #21
 800543c:	d527      	bpl.n	800548e <__ssputs_r+0x8e>
 800543e:	4629      	mov	r1, r5
 8005440:	f7ff ff52 	bl	80052e8 <_malloc_r>
 8005444:	4606      	mov	r6, r0
 8005446:	b360      	cbz	r0, 80054a2 <__ssputs_r+0xa2>
 8005448:	6921      	ldr	r1, [r4, #16]
 800544a:	464a      	mov	r2, r9
 800544c:	f7ff fed2 	bl	80051f4 <memcpy>
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	6126      	str	r6, [r4, #16]
 800545e:	6165      	str	r5, [r4, #20]
 8005460:	444e      	add	r6, r9
 8005462:	eba5 0509 	sub.w	r5, r5, r9
 8005466:	6026      	str	r6, [r4, #0]
 8005468:	60a5      	str	r5, [r4, #8]
 800546a:	463e      	mov	r6, r7
 800546c:	42be      	cmp	r6, r7
 800546e:	d900      	bls.n	8005472 <__ssputs_r+0x72>
 8005470:	463e      	mov	r6, r7
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	4632      	mov	r2, r6
 8005476:	4641      	mov	r1, r8
 8005478:	f000 faa8 	bl	80059cc <memmove>
 800547c:	68a3      	ldr	r3, [r4, #8]
 800547e:	1b9b      	subs	r3, r3, r6
 8005480:	60a3      	str	r3, [r4, #8]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	4433      	add	r3, r6
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	2000      	movs	r0, #0
 800548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548e:	462a      	mov	r2, r5
 8005490:	f000 fac6 	bl	8005a20 <_realloc_r>
 8005494:	4606      	mov	r6, r0
 8005496:	2800      	cmp	r0, #0
 8005498:	d1e0      	bne.n	800545c <__ssputs_r+0x5c>
 800549a:	6921      	ldr	r1, [r4, #16]
 800549c:	4650      	mov	r0, sl
 800549e:	f7ff feb7 	bl	8005210 <_free_r>
 80054a2:	230c      	movs	r3, #12
 80054a4:	f8ca 3000 	str.w	r3, [sl]
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	e7e9      	b.n	800548a <__ssputs_r+0x8a>
	...

080054b8 <_svfiprintf_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	4698      	mov	r8, r3
 80054be:	898b      	ldrh	r3, [r1, #12]
 80054c0:	061b      	lsls	r3, r3, #24
 80054c2:	b09d      	sub	sp, #116	@ 0x74
 80054c4:	4607      	mov	r7, r0
 80054c6:	460d      	mov	r5, r1
 80054c8:	4614      	mov	r4, r2
 80054ca:	d510      	bpl.n	80054ee <_svfiprintf_r+0x36>
 80054cc:	690b      	ldr	r3, [r1, #16]
 80054ce:	b973      	cbnz	r3, 80054ee <_svfiprintf_r+0x36>
 80054d0:	2140      	movs	r1, #64	@ 0x40
 80054d2:	f7ff ff09 	bl	80052e8 <_malloc_r>
 80054d6:	6028      	str	r0, [r5, #0]
 80054d8:	6128      	str	r0, [r5, #16]
 80054da:	b930      	cbnz	r0, 80054ea <_svfiprintf_r+0x32>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	b01d      	add	sp, #116	@ 0x74
 80054e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ea:	2340      	movs	r3, #64	@ 0x40
 80054ec:	616b      	str	r3, [r5, #20]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f2:	2320      	movs	r3, #32
 80054f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fc:	2330      	movs	r3, #48	@ 0x30
 80054fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800569c <_svfiprintf_r+0x1e4>
 8005502:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005506:	f04f 0901 	mov.w	r9, #1
 800550a:	4623      	mov	r3, r4
 800550c:	469a      	mov	sl, r3
 800550e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005512:	b10a      	cbz	r2, 8005518 <_svfiprintf_r+0x60>
 8005514:	2a25      	cmp	r2, #37	@ 0x25
 8005516:	d1f9      	bne.n	800550c <_svfiprintf_r+0x54>
 8005518:	ebba 0b04 	subs.w	fp, sl, r4
 800551c:	d00b      	beq.n	8005536 <_svfiprintf_r+0x7e>
 800551e:	465b      	mov	r3, fp
 8005520:	4622      	mov	r2, r4
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ff6b 	bl	8005400 <__ssputs_r>
 800552a:	3001      	adds	r0, #1
 800552c:	f000 80a7 	beq.w	800567e <_svfiprintf_r+0x1c6>
 8005530:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005532:	445a      	add	r2, fp
 8005534:	9209      	str	r2, [sp, #36]	@ 0x24
 8005536:	f89a 3000 	ldrb.w	r3, [sl]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 809f 	beq.w	800567e <_svfiprintf_r+0x1c6>
 8005540:	2300      	movs	r3, #0
 8005542:	f04f 32ff 	mov.w	r2, #4294967295
 8005546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554a:	f10a 0a01 	add.w	sl, sl, #1
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005556:	931a      	str	r3, [sp, #104]	@ 0x68
 8005558:	4654      	mov	r4, sl
 800555a:	2205      	movs	r2, #5
 800555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005560:	484e      	ldr	r0, [pc, #312]	@ (800569c <_svfiprintf_r+0x1e4>)
 8005562:	f7fa fe5d 	bl	8000220 <memchr>
 8005566:	9a04      	ldr	r2, [sp, #16]
 8005568:	b9d8      	cbnz	r0, 80055a2 <_svfiprintf_r+0xea>
 800556a:	06d0      	lsls	r0, r2, #27
 800556c:	bf44      	itt	mi
 800556e:	2320      	movmi	r3, #32
 8005570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005574:	0711      	lsls	r1, r2, #28
 8005576:	bf44      	itt	mi
 8005578:	232b      	movmi	r3, #43	@ 0x2b
 800557a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800557e:	f89a 3000 	ldrb.w	r3, [sl]
 8005582:	2b2a      	cmp	r3, #42	@ 0x2a
 8005584:	d015      	beq.n	80055b2 <_svfiprintf_r+0xfa>
 8005586:	9a07      	ldr	r2, [sp, #28]
 8005588:	4654      	mov	r4, sl
 800558a:	2000      	movs	r0, #0
 800558c:	f04f 0c0a 	mov.w	ip, #10
 8005590:	4621      	mov	r1, r4
 8005592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005596:	3b30      	subs	r3, #48	@ 0x30
 8005598:	2b09      	cmp	r3, #9
 800559a:	d94b      	bls.n	8005634 <_svfiprintf_r+0x17c>
 800559c:	b1b0      	cbz	r0, 80055cc <_svfiprintf_r+0x114>
 800559e:	9207      	str	r2, [sp, #28]
 80055a0:	e014      	b.n	80055cc <_svfiprintf_r+0x114>
 80055a2:	eba0 0308 	sub.w	r3, r0, r8
 80055a6:	fa09 f303 	lsl.w	r3, r9, r3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	9304      	str	r3, [sp, #16]
 80055ae:	46a2      	mov	sl, r4
 80055b0:	e7d2      	b.n	8005558 <_svfiprintf_r+0xa0>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d19      	adds	r1, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9103      	str	r1, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfbb      	ittet	lt
 80055be:	425b      	neglt	r3, r3
 80055c0:	f042 0202 	orrlt.w	r2, r2, #2
 80055c4:	9307      	strge	r3, [sp, #28]
 80055c6:	9307      	strlt	r3, [sp, #28]
 80055c8:	bfb8      	it	lt
 80055ca:	9204      	strlt	r2, [sp, #16]
 80055cc:	7823      	ldrb	r3, [r4, #0]
 80055ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d0:	d10a      	bne.n	80055e8 <_svfiprintf_r+0x130>
 80055d2:	7863      	ldrb	r3, [r4, #1]
 80055d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80055d6:	d132      	bne.n	800563e <_svfiprintf_r+0x186>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	1d1a      	adds	r2, r3, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	9203      	str	r2, [sp, #12]
 80055e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055e4:	3402      	adds	r4, #2
 80055e6:	9305      	str	r3, [sp, #20]
 80055e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056ac <_svfiprintf_r+0x1f4>
 80055ec:	7821      	ldrb	r1, [r4, #0]
 80055ee:	2203      	movs	r2, #3
 80055f0:	4650      	mov	r0, sl
 80055f2:	f7fa fe15 	bl	8000220 <memchr>
 80055f6:	b138      	cbz	r0, 8005608 <_svfiprintf_r+0x150>
 80055f8:	9b04      	ldr	r3, [sp, #16]
 80055fa:	eba0 000a 	sub.w	r0, r0, sl
 80055fe:	2240      	movs	r2, #64	@ 0x40
 8005600:	4082      	lsls	r2, r0
 8005602:	4313      	orrs	r3, r2
 8005604:	3401      	adds	r4, #1
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560c:	4824      	ldr	r0, [pc, #144]	@ (80056a0 <_svfiprintf_r+0x1e8>)
 800560e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005612:	2206      	movs	r2, #6
 8005614:	f7fa fe04 	bl	8000220 <memchr>
 8005618:	2800      	cmp	r0, #0
 800561a:	d036      	beq.n	800568a <_svfiprintf_r+0x1d2>
 800561c:	4b21      	ldr	r3, [pc, #132]	@ (80056a4 <_svfiprintf_r+0x1ec>)
 800561e:	bb1b      	cbnz	r3, 8005668 <_svfiprintf_r+0x1b0>
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	3307      	adds	r3, #7
 8005624:	f023 0307 	bic.w	r3, r3, #7
 8005628:	3308      	adds	r3, #8
 800562a:	9303      	str	r3, [sp, #12]
 800562c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800562e:	4433      	add	r3, r6
 8005630:	9309      	str	r3, [sp, #36]	@ 0x24
 8005632:	e76a      	b.n	800550a <_svfiprintf_r+0x52>
 8005634:	fb0c 3202 	mla	r2, ip, r2, r3
 8005638:	460c      	mov	r4, r1
 800563a:	2001      	movs	r0, #1
 800563c:	e7a8      	b.n	8005590 <_svfiprintf_r+0xd8>
 800563e:	2300      	movs	r3, #0
 8005640:	3401      	adds	r4, #1
 8005642:	9305      	str	r3, [sp, #20]
 8005644:	4619      	mov	r1, r3
 8005646:	f04f 0c0a 	mov.w	ip, #10
 800564a:	4620      	mov	r0, r4
 800564c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005650:	3a30      	subs	r2, #48	@ 0x30
 8005652:	2a09      	cmp	r2, #9
 8005654:	d903      	bls.n	800565e <_svfiprintf_r+0x1a6>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0c6      	beq.n	80055e8 <_svfiprintf_r+0x130>
 800565a:	9105      	str	r1, [sp, #20]
 800565c:	e7c4      	b.n	80055e8 <_svfiprintf_r+0x130>
 800565e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005662:	4604      	mov	r4, r0
 8005664:	2301      	movs	r3, #1
 8005666:	e7f0      	b.n	800564a <_svfiprintf_r+0x192>
 8005668:	ab03      	add	r3, sp, #12
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	462a      	mov	r2, r5
 800566e:	4b0e      	ldr	r3, [pc, #56]	@ (80056a8 <_svfiprintf_r+0x1f0>)
 8005670:	a904      	add	r1, sp, #16
 8005672:	4638      	mov	r0, r7
 8005674:	f3af 8000 	nop.w
 8005678:	1c42      	adds	r2, r0, #1
 800567a:	4606      	mov	r6, r0
 800567c:	d1d6      	bne.n	800562c <_svfiprintf_r+0x174>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	065b      	lsls	r3, r3, #25
 8005682:	f53f af2d 	bmi.w	80054e0 <_svfiprintf_r+0x28>
 8005686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005688:	e72c      	b.n	80054e4 <_svfiprintf_r+0x2c>
 800568a:	ab03      	add	r3, sp, #12
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	462a      	mov	r2, r5
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <_svfiprintf_r+0x1f0>)
 8005692:	a904      	add	r1, sp, #16
 8005694:	4638      	mov	r0, r7
 8005696:	f000 f879 	bl	800578c <_printf_i>
 800569a:	e7ed      	b.n	8005678 <_svfiprintf_r+0x1c0>
 800569c:	08005b08 	.word	0x08005b08
 80056a0:	08005b12 	.word	0x08005b12
 80056a4:	00000000 	.word	0x00000000
 80056a8:	08005401 	.word	0x08005401
 80056ac:	08005b0e 	.word	0x08005b0e

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc26      	bgt.n	8005746 <_printf_common+0x96>
 80056f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	3b00      	subs	r3, #0
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d42b      	bmi.n	8005760 <_printf_common+0xb0>
 8005708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800570c:	4641      	mov	r1, r8
 800570e:	4638      	mov	r0, r7
 8005710:	47c8      	blx	r9
 8005712:	3001      	adds	r0, #1
 8005714:	d01e      	beq.n	8005754 <_printf_common+0xa4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	6922      	ldr	r2, [r4, #16]
 800571a:	f003 0306 	and.w	r3, r3, #6
 800571e:	2b04      	cmp	r3, #4
 8005720:	bf02      	ittt	eq
 8005722:	68e5      	ldreq	r5, [r4, #12]
 8005724:	6833      	ldreq	r3, [r6, #0]
 8005726:	1aed      	subeq	r5, r5, r3
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	bf0c      	ite	eq
 800572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005730:	2500      	movne	r5, #0
 8005732:	4293      	cmp	r3, r2
 8005734:	bfc4      	itt	gt
 8005736:	1a9b      	subgt	r3, r3, r2
 8005738:	18ed      	addgt	r5, r5, r3
 800573a:	2600      	movs	r6, #0
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xc8>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xa8>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4641      	mov	r1, r8
 800574c:	4638      	mov	r0, r7
 800574e:	47c8      	blx	r9
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xac>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c6      	b.n	80056ee <_printf_common+0x3e>
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	2030      	movs	r0, #48	@ 0x30
 8005766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800576a:	4422      	add	r2, r4
 800576c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005774:	3302      	adds	r3, #2
 8005776:	e7c7      	b.n	8005708 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4641      	mov	r1, r8
 800577e:	4638      	mov	r0, r7
 8005780:	47c8      	blx	r9
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa4>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x8e>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005794:	2f78      	cmp	r7, #120	@ 0x78
 8005796:	4691      	mov	r9, r2
 8005798:	4680      	mov	r8, r0
 800579a:	460c      	mov	r4, r1
 800579c:	469a      	mov	sl, r3
 800579e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	@ 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d2 	beq.w	8005952 <_printf_i+0x1c6>
 80057ae:	2f58      	cmp	r7, #88	@ 0x58
 80057b0:	f000 80b9 	beq.w	8005926 <_printf_i+0x19a>
 80057b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	@ (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	08005939 	.word	0x08005939
 80057fc:	08005863 	.word	0x08005863
 8005800:	080058f3 	.word	0x080058f3
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	0800595b 	.word	0x0800595b
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005863 	.word	0x08005863
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	080058fb 	.word	0x080058fb
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6032      	str	r2, [r6, #0]
 800582c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e09d      	b.n	8005974 <_printf_i+0x1e8>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	1d19      	adds	r1, r3, #4
 800583e:	6031      	str	r1, [r6, #0]
 8005840:	0606      	lsls	r6, r0, #24
 8005842:	d501      	bpl.n	8005848 <_printf_i+0xbc>
 8005844:	681d      	ldr	r5, [r3, #0]
 8005846:	e003      	b.n	8005850 <_printf_i+0xc4>
 8005848:	0645      	lsls	r5, r0, #25
 800584a:	d5fb      	bpl.n	8005844 <_printf_i+0xb8>
 800584c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005850:	2d00      	cmp	r5, #0
 8005852:	da03      	bge.n	800585c <_printf_i+0xd0>
 8005854:	232d      	movs	r3, #45	@ 0x2d
 8005856:	426d      	negs	r5, r5
 8005858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800585c:	4859      	ldr	r0, [pc, #356]	@ (80059c4 <_printf_i+0x238>)
 800585e:	230a      	movs	r3, #10
 8005860:	e011      	b.n	8005886 <_printf_i+0xfa>
 8005862:	6821      	ldr	r1, [r4, #0]
 8005864:	6833      	ldr	r3, [r6, #0]
 8005866:	0608      	lsls	r0, r1, #24
 8005868:	f853 5b04 	ldr.w	r5, [r3], #4
 800586c:	d402      	bmi.n	8005874 <_printf_i+0xe8>
 800586e:	0649      	lsls	r1, r1, #25
 8005870:	bf48      	it	mi
 8005872:	b2ad      	uxthmi	r5, r5
 8005874:	2f6f      	cmp	r7, #111	@ 0x6f
 8005876:	4853      	ldr	r0, [pc, #332]	@ (80059c4 <_printf_i+0x238>)
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	bf14      	ite	ne
 800587c:	230a      	movne	r3, #10
 800587e:	2308      	moveq	r3, #8
 8005880:	2100      	movs	r1, #0
 8005882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005886:	6866      	ldr	r6, [r4, #4]
 8005888:	60a6      	str	r6, [r4, #8]
 800588a:	2e00      	cmp	r6, #0
 800588c:	bfa2      	ittt	ge
 800588e:	6821      	ldrge	r1, [r4, #0]
 8005890:	f021 0104 	bicge.w	r1, r1, #4
 8005894:	6021      	strge	r1, [r4, #0]
 8005896:	b90d      	cbnz	r5, 800589c <_printf_i+0x110>
 8005898:	2e00      	cmp	r6, #0
 800589a:	d04b      	beq.n	8005934 <_printf_i+0x1a8>
 800589c:	4616      	mov	r6, r2
 800589e:	fbb5 f1f3 	udiv	r1, r5, r3
 80058a2:	fb03 5711 	mls	r7, r3, r1, r5
 80058a6:	5dc7      	ldrb	r7, [r0, r7]
 80058a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058ac:	462f      	mov	r7, r5
 80058ae:	42bb      	cmp	r3, r7
 80058b0:	460d      	mov	r5, r1
 80058b2:	d9f4      	bls.n	800589e <_printf_i+0x112>
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d10b      	bne.n	80058d0 <_printf_i+0x144>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07df      	lsls	r7, r3, #31
 80058bc:	d508      	bpl.n	80058d0 <_printf_i+0x144>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	6861      	ldr	r1, [r4, #4]
 80058c2:	4299      	cmp	r1, r3
 80058c4:	bfde      	ittt	le
 80058c6:	2330      	movle	r3, #48	@ 0x30
 80058c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058d0:	1b92      	subs	r2, r2, r6
 80058d2:	6122      	str	r2, [r4, #16]
 80058d4:	f8cd a000 	str.w	sl, [sp]
 80058d8:	464b      	mov	r3, r9
 80058da:	aa03      	add	r2, sp, #12
 80058dc:	4621      	mov	r1, r4
 80058de:	4640      	mov	r0, r8
 80058e0:	f7ff fee6 	bl	80056b0 <_printf_common>
 80058e4:	3001      	adds	r0, #1
 80058e6:	d14a      	bne.n	800597e <_printf_i+0x1f2>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	b004      	add	sp, #16
 80058ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f043 0320 	orr.w	r3, r3, #32
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	4833      	ldr	r0, [pc, #204]	@ (80059c8 <_printf_i+0x23c>)
 80058fc:	2778      	movs	r7, #120	@ 0x78
 80058fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	6831      	ldr	r1, [r6, #0]
 8005906:	061f      	lsls	r7, r3, #24
 8005908:	f851 5b04 	ldr.w	r5, [r1], #4
 800590c:	d402      	bmi.n	8005914 <_printf_i+0x188>
 800590e:	065f      	lsls	r7, r3, #25
 8005910:	bf48      	it	mi
 8005912:	b2ad      	uxthmi	r5, r5
 8005914:	6031      	str	r1, [r6, #0]
 8005916:	07d9      	lsls	r1, r3, #31
 8005918:	bf44      	itt	mi
 800591a:	f043 0320 	orrmi.w	r3, r3, #32
 800591e:	6023      	strmi	r3, [r4, #0]
 8005920:	b11d      	cbz	r5, 800592a <_printf_i+0x19e>
 8005922:	2310      	movs	r3, #16
 8005924:	e7ac      	b.n	8005880 <_printf_i+0xf4>
 8005926:	4827      	ldr	r0, [pc, #156]	@ (80059c4 <_printf_i+0x238>)
 8005928:	e7e9      	b.n	80058fe <_printf_i+0x172>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f023 0320 	bic.w	r3, r3, #32
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	e7f6      	b.n	8005922 <_printf_i+0x196>
 8005934:	4616      	mov	r6, r2
 8005936:	e7bd      	b.n	80058b4 <_printf_i+0x128>
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	6825      	ldr	r5, [r4, #0]
 800593c:	6961      	ldr	r1, [r4, #20]
 800593e:	1d18      	adds	r0, r3, #4
 8005940:	6030      	str	r0, [r6, #0]
 8005942:	062e      	lsls	r6, r5, #24
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	d501      	bpl.n	800594c <_printf_i+0x1c0>
 8005948:	6019      	str	r1, [r3, #0]
 800594a:	e002      	b.n	8005952 <_printf_i+0x1c6>
 800594c:	0668      	lsls	r0, r5, #25
 800594e:	d5fb      	bpl.n	8005948 <_printf_i+0x1bc>
 8005950:	8019      	strh	r1, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	4616      	mov	r6, r2
 8005958:	e7bc      	b.n	80058d4 <_printf_i+0x148>
 800595a:	6833      	ldr	r3, [r6, #0]
 800595c:	1d1a      	adds	r2, r3, #4
 800595e:	6032      	str	r2, [r6, #0]
 8005960:	681e      	ldr	r6, [r3, #0]
 8005962:	6862      	ldr	r2, [r4, #4]
 8005964:	2100      	movs	r1, #0
 8005966:	4630      	mov	r0, r6
 8005968:	f7fa fc5a 	bl	8000220 <memchr>
 800596c:	b108      	cbz	r0, 8005972 <_printf_i+0x1e6>
 800596e:	1b80      	subs	r0, r0, r6
 8005970:	6060      	str	r0, [r4, #4]
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	2300      	movs	r3, #0
 8005978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800597c:	e7aa      	b.n	80058d4 <_printf_i+0x148>
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	4632      	mov	r2, r6
 8005982:	4649      	mov	r1, r9
 8005984:	4640      	mov	r0, r8
 8005986:	47d0      	blx	sl
 8005988:	3001      	adds	r0, #1
 800598a:	d0ad      	beq.n	80058e8 <_printf_i+0x15c>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	079b      	lsls	r3, r3, #30
 8005990:	d413      	bmi.n	80059ba <_printf_i+0x22e>
 8005992:	68e0      	ldr	r0, [r4, #12]
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	4298      	cmp	r0, r3
 8005998:	bfb8      	it	lt
 800599a:	4618      	movlt	r0, r3
 800599c:	e7a6      	b.n	80058ec <_printf_i+0x160>
 800599e:	2301      	movs	r3, #1
 80059a0:	4632      	mov	r2, r6
 80059a2:	4649      	mov	r1, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	47d0      	blx	sl
 80059a8:	3001      	adds	r0, #1
 80059aa:	d09d      	beq.n	80058e8 <_printf_i+0x15c>
 80059ac:	3501      	adds	r5, #1
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	9903      	ldr	r1, [sp, #12]
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	42ab      	cmp	r3, r5
 80059b6:	dcf2      	bgt.n	800599e <_printf_i+0x212>
 80059b8:	e7eb      	b.n	8005992 <_printf_i+0x206>
 80059ba:	2500      	movs	r5, #0
 80059bc:	f104 0619 	add.w	r6, r4, #25
 80059c0:	e7f5      	b.n	80059ae <_printf_i+0x222>
 80059c2:	bf00      	nop
 80059c4:	08005b19 	.word	0x08005b19
 80059c8:	08005b2a 	.word	0x08005b2a

080059cc <memmove>:
 80059cc:	4288      	cmp	r0, r1
 80059ce:	b510      	push	{r4, lr}
 80059d0:	eb01 0402 	add.w	r4, r1, r2
 80059d4:	d902      	bls.n	80059dc <memmove+0x10>
 80059d6:	4284      	cmp	r4, r0
 80059d8:	4623      	mov	r3, r4
 80059da:	d807      	bhi.n	80059ec <memmove+0x20>
 80059dc:	1e43      	subs	r3, r0, #1
 80059de:	42a1      	cmp	r1, r4
 80059e0:	d008      	beq.n	80059f4 <memmove+0x28>
 80059e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ea:	e7f8      	b.n	80059de <memmove+0x12>
 80059ec:	4402      	add	r2, r0
 80059ee:	4601      	mov	r1, r0
 80059f0:	428a      	cmp	r2, r1
 80059f2:	d100      	bne.n	80059f6 <memmove+0x2a>
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059fe:	e7f7      	b.n	80059f0 <memmove+0x24>

08005a00 <_sbrk_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d06      	ldr	r5, [pc, #24]	@ (8005a1c <_sbrk_r+0x1c>)
 8005a04:	2300      	movs	r3, #0
 8005a06:	4604      	mov	r4, r0
 8005a08:	4608      	mov	r0, r1
 8005a0a:	602b      	str	r3, [r5, #0]
 8005a0c:	f7ff f9f4 	bl	8004df8 <_sbrk>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_sbrk_r+0x1a>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_sbrk_r+0x1a>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	200009f8 	.word	0x200009f8

08005a20 <_realloc_r>:
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	4680      	mov	r8, r0
 8005a26:	4615      	mov	r5, r2
 8005a28:	460c      	mov	r4, r1
 8005a2a:	b921      	cbnz	r1, 8005a36 <_realloc_r+0x16>
 8005a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	4611      	mov	r1, r2
 8005a32:	f7ff bc59 	b.w	80052e8 <_malloc_r>
 8005a36:	b92a      	cbnz	r2, 8005a44 <_realloc_r+0x24>
 8005a38:	f7ff fbea 	bl	8005210 <_free_r>
 8005a3c:	2400      	movs	r4, #0
 8005a3e:	4620      	mov	r0, r4
 8005a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a44:	f000 f81a 	bl	8005a7c <_malloc_usable_size_r>
 8005a48:	4285      	cmp	r5, r0
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	d802      	bhi.n	8005a54 <_realloc_r+0x34>
 8005a4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a52:	d8f4      	bhi.n	8005a3e <_realloc_r+0x1e>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4640      	mov	r0, r8
 8005a58:	f7ff fc46 	bl	80052e8 <_malloc_r>
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d0ec      	beq.n	8005a3c <_realloc_r+0x1c>
 8005a62:	42b5      	cmp	r5, r6
 8005a64:	462a      	mov	r2, r5
 8005a66:	4621      	mov	r1, r4
 8005a68:	bf28      	it	cs
 8005a6a:	4632      	movcs	r2, r6
 8005a6c:	f7ff fbc2 	bl	80051f4 <memcpy>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4640      	mov	r0, r8
 8005a74:	f7ff fbcc 	bl	8005210 <_free_r>
 8005a78:	463c      	mov	r4, r7
 8005a7a:	e7e0      	b.n	8005a3e <_realloc_r+0x1e>

08005a7c <_malloc_usable_size_r>:
 8005a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a80:	1f18      	subs	r0, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfbc      	itt	lt
 8005a86:	580b      	ldrlt	r3, [r1, r0]
 8005a88:	18c0      	addlt	r0, r0, r3
 8005a8a:	4770      	bx	lr

08005a8c <_init>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr

08005a98 <_fini>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr
